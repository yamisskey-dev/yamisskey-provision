- name: Ensure rsyslog is installed
  apt:
    name: rsyslog
    state: present

- name: Ensure syslog user exists
  user:
    name: syslog
    state: present
    system: yes

- name: Backup original rsyslog.conf
  copy:
    src: /etc/rsyslog.conf
    dest: /etc/rsyslog.conf.bak
    remote_src: yes
  become: true

- name: Deploy custom rsyslog configuration
  template:
    src: templates/rsyslog.conf.j2
    dest: /etc/rsyslog.conf
    owner: root
    group: root
    mode: '0644'
  notify: Validate rsyslog configuration

- name: Ensure logrotate is installed
  apt:
    name: logrotate
    state: present
  become: true

- name: Deploy custom logrotate configuration for rsyslog
  template:
    src: templates/logrotate_rsyslog.j2
    dest: /etc/logrotate.d/rsyslog
    owner: root
    group: root
    mode: '0644'

- name: Ensure UFW is installed
  apt:
    name: ufw
    state: present

- name: Allow SSH on port 2222
  ufw:
    rule: limit
    port: 2222
    proto: tcp

- name: Allow HTTP traffic on port 80
  ufw:
    rule: allow
    port: 80
    proto: tcp

- name: Allow HTTPS traffic on port 443
  ufw:
    rule: allow
    port: 443
    proto: tcp

- name: Allow custom application traffic on port 3000
  ufw:
    rule: allow
    port: 3000
    proto: tcp

- name: Enable UFW
  ufw:
    state: enabled

- name: Set default deny policy for incoming traffic
  command: ufw default deny incoming
  become: true

- name: Set default allow policy for outgoing traffic
  command: ufw default allow outgoing
  become: true

- name: Ensure UFW logging is off
  command: ufw logging off
  ignore_errors: yes

- name: Enable UFW service
  systemd:
    name: ufw
    enabled: yes

- name: Check UFW status
  command: ufw status verbose
  register: ufw_status
  become: true

- name: Display UFW status
  debug:
    msg: '{{ ufw_status.stdout }}'

- name: Find cloudflared UUID file
  find:
    paths: '/home/{{ user_name }}/.cloudflared'
    patterns: '*.json'
  register: uuid_files

- name: Set tunnel UUID
  set_fact:
    tunnel_uuid: "{{ item.path | regex_replace('^.*/(.*)\\.json$', '\\1') }}"
  loop: '{{ uuid_files.files }}'
  when: uuid_files.matched > 0
  changed_when: false

- name: Debug tunnel_uuid
  debug:
    msg: 'Tunnel UUID: {{ tunnel_uuid }}'

- name: Set cloudflared config.yml content
  template:
    src: templates/cloudflared.config.yml.j2
    dest: '/etc/cloudflared/config.yml'
    owner: 'root'
    mode: '0600'
  vars:
    tunnel_uuid: '{{ tunnel_uuid }}'
  notify: Restart Cloudflared

- name: Install cloudflared as a system service
  command: cloudflared service install
  args:
    creates: /etc/systemd/system/cloudflared.service

- name: Reload systemd to apply new service file
  command: systemctl daemon-reload

- name: Reload Nginx
  systemd:
    name: nginx
    state: reloaded

- name: Backup original jail.conf
  copy:
    src: /etc/fail2ban/jail.conf
    dest: /etc/fail2ban/jail.conf.bak
    remote_src: yes
  become: true
  notify: Restart fail2ban

- name: Copy custom jail.local
  copy:
    src: '{{ set_dir }}/fail2ban/jail.local'
    dest: /etc/fail2ban/jail.local
  become: true
  notify: Restart fail2ban

- name: Ensure fail2ban is started and enabled
  systemd:
    name: fail2ban
    state: started
    enabled: true
  become: true

- name: Check fail2ban status for sshd
  command: fail2ban-client status sshd
  register: result
  failed_when: "'sshd' not in result.stdout"
  become: true

- name: Debug fail2ban status
  debug:
    msg: '{{ result.stdout }}'

- name: Ensure log directory for ClamAV exists
  file:
    path: /var/log/clamav
    state: directory
    owner: clamav
    group: adm
    mode: '0755'
  become: true

- name: Ensure freshclam log file is writable
  file:
    path: /var/log/clamav/freshclam.log
    state: touch
    owner: clamav
    group: adm
    mode: '0644'
  become: true

- name: Update ClamAV virus database
  command: freshclam
  become: true
  failed_when: false
  changed_when: false

- name: Ensure ClamAV daemon is started and enabled
  systemd:
    name: clamav-daemon
    state: started
    enabled: true
  become: true

- name: Schedule daily ClamAV scan
  cron:
    name: 'Daily ClamAV scan'
    minute: '0'
    hour: '2'
    job: "/usr/bin/clamscan -r / --exclude-dir='^/sys' --exclude-dir='^/proc' --exclude-dir='^/dev' --log=/var/log/clamav/clamav-$(date +\\%Y\\%m\\%d).log"
  become: true

- name: Retrieve Tailscale status
  command: tailscale status --json
  register: tailscale_status

- name: Parse Tailscale IP addresses
  set_fact:
    tailscale_ips: "{{ tailscale_status.stdout | from_json | json_query('Peer.*.TailscaleIPs') | flatten | select('match', '100\\..*') | list }}"

- name: Allow VNC traffic on port 5900 only from Tailscale IPs
  ufw:
    rule: allow
    port: '{{ vnc_port }}'
    proto: tcp
    from_ip: '{{ item }}'
  loop: '{{ tailscale_ips }}'

- name: Ensure x11vnc is installed
  apt:
    name: x11vnc
    state: present

- name: Set VNC password
  command: x11vnc -storepasswd /etc/x11vnc.pass
  args:
    creates: /etc/x11vnc.pass

- name: Create x11vnc systemd service file
  copy:
    dest: /etc/systemd/system/x11vnc.service
    content: |
      [Unit]
      Description=Start x11vnc at startup.
      After=multi-user.target

      [Service]
      Type=simple
      ExecStart=/usr/bin/x11vnc -auth guess -forever -loop -noxdamage -repeat -rfbauth /etc/x11vnc.pass -rfbport 5900 -shared -localhost
      ExecStop=/usr/bin/killall x11vnc
      Restart=on-failure
      User=root

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd to apply new service file
  command: systemctl daemon-reload

- name: Start and enable x11vnc service
  systemd:
    name: x11vnc
    state: started
    enabled: true

