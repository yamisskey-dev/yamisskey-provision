---
- name: Ensure required packages are installed
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - rsyslog
    - logrotate
    - ufw
    - tailscale
    - fail2ban
    - lynis
    - certbot
    - python3-certbot-dns-cloudflare
  become: true

- name: Ensure syslog user exists
  user:
    name: syslog
    state: present
    system: yes

- name: Backup and deploy rsyslog configuration
  block:
    - name: Backup original rsyslog.conf
      copy:
        src: /etc/rsyslog.conf
        dest: /etc/rsyslog.conf.bak
        remote_src: yes
      become: true

    - name: Deploy custom rsyslog configuration
      template:
        src: templates/rsyslog.conf.j2
        dest: /etc/rsyslog.conf
        owner: root
        group: root
        mode: '0644'
      notify: Validate rsyslog configuration

- name: Verify Cloudflare configuration exists
  stat:
    path: '/etc/cloudflare/cloudflare.ini'
  register: cloudflare_conf

- name: Fail if Cloudflare configuration does not exist
  fail:
    msg: 'Cloudflare configuration file /etc/cloudflare/cloudflare.ini does not exist.'
  when: not cloudflare_conf.stat.exists

- name: Obtain SSL certificate for main domain using certbot and Cloudflare DNS
  command: >
    certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/cloudflare/cloudflare.ini
    --dns-cloudflare-propagation-seconds 60 --server https://acme-v02.api.letsencrypt.org/directory
    -d {{ domain }} -m admin@{{ domain }} --agree-tos --non-interactive
  become: true
  register: certbot_result_main

- name: Display certbot result for main domain
  debug:
    msg: "{{ certbot_result_main.stdout }}"

- name: Obtain SSL certificate for subdomains using certbot and Cloudflare DNS
  command: >
    certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/cloudflare/cloudflare.ini
    --dns-cloudflare-propagation-seconds 60 --server https://acme-v02.api.letsencrypt.org/directory
    -d {{ synapse_server_name }},{{ element_server_name }},{{ jitsi_server_name }},{{ minio_api_server_name }},{{ minio_web_server_name }},{{ vikunja_server_name }},{{ ctfd_server_name }},{{ grafana_server_name }}
    -m admin@{{ domain }} --agree-tos --non-interactive
  become: true
  register: certbot_result_subdomains

- name: Display certbot result for subdomains
  debug:
    msg: "{{ certbot_result_subdomains.stdout }}"

- name: Deploy custom logrotate configuration for rsyslog
  template:
    src: templates/logrotate_rsyslog.j2
    dest: /etc/logrotate.d/rsyslog
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Configure UFW rules and service
  block:
    - name: Ensure UFW is enabled
      ufw:
        state: enabled

    - name: Set default deny policy for incoming traffic
      command: ufw default deny incoming
      become: true

    - name: Set default allow policy for outgoing traffic
      command: ufw default allow outgoing
      become: true

    - name: Allow specified TCP ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: "{{ ufw_ports }}"
      become: true

    - name: Open necessary ports for WARP and WireGuard
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop: "{{ warp_wireguard_ports }}"
      become: true

    - name: Allow Cloudflare WARP IP ranges
      ufw:
        rule: allow
        from: "{{ item }}"
      loop: "{{ cloudflare_warp_ips }}"
      become: true

    - name: Open necessary ports for QUIC (UDP 443)
      ufw:
        rule: allow
        port: 443
        proto: udp
      become: true

    - name: Ensure UFW logging is off
      command: ufw logging off
      ignore_errors: yes
      become: true

    - name: Reload UFW to apply changes
      command: ufw reload
      become: true

    - name: Check UFW status
      command: ufw status verbose
      register: ufw_status
      become: true

    - name: Display UFW status
      debug:
        msg: '{{ ufw_status.stdout }}'
  become: true

- name: Restart cloudflared service
  systemd:
    name: cloudflared
    state: restarted
    enabled: true
  become: true

- name: Start Tailscale with SSH enabled
  command: tailscale up --ssh --accept-dns=false --reset
  register: tailscale_up

- name: Retrieve and parse Tailscale IP addresses
  block:
    - name: Retrieve Tailscale status
      command: tailscale status --json
      register: tailscale_status

    - name: Set Tailscale IPs
      set_fact:
        tailscale_ips: "{{ tailscale_status.stdout | from_json | json_query('Peer.*.TailscaleIPs') | flatten | select('match', '100\\..*') | list }}"

    - name: Allow SSH from Tailscale IPs
      ufw:
        rule: allow
        port: 22
        proto: tcp
        from_ip: '{{ item }}'
      loop: "{{ tailscale_ips }}"

    - name: Allow SSH from self Tailscale IP
      ufw:
        rule: allow
        port: 22
        proto: tcp
        from_ip: '{{ ansible_default_ipv4.address }}'
  become: true

- name: Configure SSH settings
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    create: yes
    line: '{{ item }}'
  loop:
    - 'Port 2222'
    - 'AuthorizedKeysFile .ssh/authorized_keys'
    - 'RSAAuthentication yes'
    - 'PubkeyAuthentication yes'
    - 'AllowTcpForwarding yes'
    - 'ClientAliveCountMax 3'
    - 'Compression no'
    - 'LogLevel INFO'
    - 'MaxAuthTries 10'
    - 'MaxSessions 10'
    - 'TCPKeepAlive yes'
    - 'X11Forwarding no'
    - 'AllowAgentForwarding yes'
  notify: Restart SSH service

- name: Backup and deploy fail2ban configuration
  block:
    - name: Backup original jail.conf
      copy:
        src: /etc/fail2ban/jail.conf
        dest: /etc/fail2ban/jail.conf.bak
        remote_src: yes
      become: true

    - name: Deploy fail2ban configuration
      template:
        src: jail.local.j2
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: '0644'
      notify: Restart fail2ban

- name: Ensure fail2ban service is enabled and started
  systemd:
    name: fail2ban
    enabled: yes
    state: started
  become: true

- name: Check fail2ban status for sshd
  command: fail2ban-client status sshd
  register: result
  failed_when: "'sshd' not in result.stdout"
  become: true

- name: Debug fail2ban status
  debug:
    msg: '{{ result.stdout }}'

- name: Ensure ClamAV configuration
  block:
    - name: Ensure log directory for ClamAV exists
      file:
        path: /var/log/clamav
        state: directory
        owner: clamav
        group: adm
        mode: '0755'
      become: true

    - name: Ensure freshclam log file is writable
      file:
        path: /var/log/clamav/freshclam.log
        state: touch
        owner: clamav
        group: adm
        mode: '0644'
      become: true

    - name: Update ClamAV virus database
      command: freshclam
      become: true
      failed_when: false
      changed_when: false

    - name: Ensure ClamAV daemon is started and enabled
      systemd:
        name: clamav-daemon
        state: started
        enabled: true
      become: true

    - name: Schedule daily ClamAV scan
      cron:
        name: 'Daily ClamAV scan'
        minute: '0'
        hour: '2'
        job: "/usr/bin/clamscan -r / --exclude-dir='^/sys' --exclude-dir='^/proc' --exclude-dir='^/dev' --log=/var/log/clamav/clamav-$(date +\\%Y\\%m\\%d).log"
      become: true

- name: Configure sysctl settings
  sysctl:
    name: '{{ item.name }}'
    value: '{{ item.value }}'
    state: present
    reload: yes
  loop: "{{ sysctl_settings }}"
  notify: Reload sysctl
  become: true

- name: Reload sysctl
  command: sysctl -p
  become: true

- name: Ensure correct DNS settings
  block:
    - name: Backup current resolv.conf
      copy:
        src: /etc/resolv.conf
        dest: /etc/resolv.conf.backup
        owner: root
        group: root
        mode: '0644'

    - name: Set DNS server to Cloudflare DNS
      lineinfile:
        path: /etc/resolv.conf
        line: "nameserver 1.1.1.1"
        create: yes
        state: present

    - name: Configure Docker daemon DNS settings
      block:
        - name: Create Docker daemon configuration directory
          file:
            path: /etc/docker
            state: directory
            owner: root
            group: root
            mode: '0755'

        - name: Set Docker daemon DNS to Cloudflare
          copy:
            dest: /etc/docker/daemon.json
            content: |
              {
                "dns": ["1.1.1.1", "1.0.0.1"]
              }
            owner: root
            group: root
            mode: '0644'

        - name: Restart Docker daemon
          systemd:
            name: docker
            state: restarted
            enabled: true

    - name: Test DNS resolution with dig
      command: dig cloudflare.com
      register: dig_result
      changed_when: false

    - name: Test DNS resolution with nslookup
      command: nslookup cloudflare.com
      register: nslookup_result
      changed_when: false

    - name: Test DNS resolution with ping
      command: ping -c 3 cloudflare.com
      register: ping_result
      changed_when: false

    - name: Display DNS test results
      debug:
        msg: |
          dig result: {{ dig_result.stdout }}
          nslookup result: {{ nslookup_result.stdout }}
          ping result: {{ ping_result.stdout }}

    - name: Restore original resolv.conf
      copy:
        src: /etc/resolv.conf.backup
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: '0644'
      when: dig_result.rc != 0 or nslookup_result.rc != 0 or ping_result.rc != 0

- name: Validate DNS resolution
  block:
    - name: Test DNS resolution with dig
      command: dig cloudflare.com
      register: dig_result
      changed_when: false

    - name: Test DNS resolution with nslookup
      command: nslookup cloudflare.com
      register: nslookup_result
      changed_when: false

    - name: Test DNS resolution with ping
      command: ping -c 3 cloudflare.com
      register: ping_result
      changed_when: false

    - name: Display DNS test results
      debug:
        msg: |
          dig result: {{ dig_result.stdout }}
          nslookup result: {{ nslookup_result.stdout }}
          ping result: {{ ping_result.stdout }}
  become: true