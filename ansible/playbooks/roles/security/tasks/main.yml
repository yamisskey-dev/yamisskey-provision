- name: Find cloudflared UUID file
  find:
    paths: '/home/{{ user_name }}/.cloudflared'
    patterns: '*.json'
  register: uuid_files

- name: Set tunnel UUID
  set_fact:
    tunnel_uuid: "{{ item.path | regex_replace('^.*/(.*)\\.json$', '\\1') }}"
  loop: '{{ uuid_files.files }}'
  when: uuid_files.matched > 0
  changed_when: false

- name: Debug tunnel_uuid
  debug:
    msg: 'Tunnel UUID: {{ tunnel_uuid }}'

- name: Set cloudflared config.yml content
  template:
    src: templates/cloudflared.config.yml.j2
    dest: '/etc/cloudflared/config.yml'
    owner: 'root'
    mode: '0600'
  vars:
    tunnel_uuid: '{{ tunnel_uuid }}'
  notify: Restart Cloudflared

- name: Install cloudflared as a system service
  command: cloudflared service install
  args:
    creates: /etc/systemd/system/cloudflared.service

- name: Reload systemd to apply new service file
  command: systemctl daemon-reload

- name: Remove existing Mullvad VPN configuration
  file:
    path: /etc/mullvad-vpn
    state: absent

- name: Remove Mullvad VPN systemd service
  file:
    path: /etc/systemd/system/mullvad-daemon.service
    state: absent

- name: Remove Mullvad VPN early boot blocking service
  file:
    path: /etc/systemd/system/mullvad-daemon.service.wants/mullvad-early-boot-blocking.service
    state: absent

- name: Install Mullvad VPN
  apt:
    name: mullvad-vpn
    state: present

- name: Retrieve Mullvad VPN token
  command: mullvad account get
  register: mullvad_account_info
  changed_when: false

- name: Set Mullvad VPN token
  set_fact:
    mullvad_token: '{{ mullvad_account_info.stdout_lines[0].split()[2] }}'

- name: Debug Mullvad VPN token
  debug:
    msg: 'Mullvad VPN token: {{ mullvad_token }}'

- name: Ensure Privoxy is installed
  apt:
    name: privoxy
    state: present

- name: Configure Privoxy
  blockinfile:
    path: /etc/privoxy/config
    block: |
      listen-address 127.0.0.1:8118
      forward-socks5 / 127.0.0.1:1080 .
    marker: '# {mark} ANSIBLE MANAGED BLOCK - Privoxy Configuration'
  notify: Restart Privoxy

- name: Exclude SSH from VPN
  command: mullvad-exclude /usr/sbin/sshd

- name: Stop conflicting services
  systemd:
    name: '{{ item }}'
    state: stopped
  loop:
    - nginx
    - privoxy

- name: Clean up Unix socket
  file:
    path: /var/run/tor-misskey.sock
    state: absent

- name: Kill processes using ports 80 and 443
  shell: |
    for pid in $(lsof -t -i:80 -i:443); do
      kill -9 $pid || true
    done
  ignore_errors: true

- name: Kill process using port 8118
  shell: |
    if [ -n "{{ port_8118_check.stdout }}" ]; then
      lsof -t -i :8118 | xargs -r kill -9
    fi
  when: port_8118_check.stdout != ""
  ignore_errors: true

- name: Restart Privoxy
  systemd:
    name: privoxy
    state: restarted

- name: Exclude Nginx from VPN
  command: mullvad-exclude /usr/sbin/nginx

- name: Check Nginx configuration
  command: nginx -t
  register: nginx_test
  ignore_errors: yes

- name: Debug Nginx configuration test result
  debug:
    msg: 'Nginx configuration test result: {{ nginx_test.stdout }}'

- name: Start Nginx
  systemd:
    name: nginx
    state: started
  when: nginx_test.rc == 0

- name: Add routing rule to exclude SSH traffic from VPN
  command: ip rule add from {{ ansible_default_ipv4.address }} table main

- name: Add default route for main table
  command: ip route add default via {{ ansible_default_ipv4.gateway }} dev {{ ansible_default_ipv4.interface }} table main

- name: Ensure Mullvad VPN service is enabled and running
  systemd:
    name: mullvad-vpn
    state: started
    enabled: true

- name: Check Mullvad VPN status
  command: mullvad status
  register: vpn_status
  changed_when: false

- name: Display Mullvad VPN status
  debug:
    msg: 'Mullvad VPN status: {{ vpn_status.stdout }}'

- name: Configure DNS
  lineinfile:
    path: /etc/resolv.conf
    line: 'nameserver 8.8.8.8'
    state: present

- name: Add secondary DNS
  lineinfile:
    path: /etc/resolv.conf
    line: 'nameserver 8.8.4.4'
    state: present

- name: Start Tor
  systemd:
    name: tor@default
    enabled: yes
    state: restarted

- name: Ensure Tor hidden service directory exists
  file:
    path: /var/lib/tor/misskey
    state: directory
    owner: debian-tor
    group: debian-tor
    mode: '0700'

- name: Configure Tor hidden service
  blockinfile:
    path: /etc/tor/torrc
    block: |
      HiddenServiceDir /var/lib/tor/misskey/
      HiddenServicePort 80 unix:/var/run/tor-misskey.sock
      HiddenServiceVersion 3
    marker: '# {mark} ANSIBLE MANAGED BLOCK - Misskey Hidden Service'
  notify: Reload Tor

- name: Read and display Tor URL for Misskey
  command: cat /var/lib/tor/misskey/hostname
  register: tor_hostname
  changed_when: false

- name: Display Tor URL for Misskey
  debug:
    msg: 'Misskey Tor URL: http://{{ tor_hostname.stdout }}'

- name: Save Tor URL in a text file
  copy:
    content: 'http://{{ tor_hostname.stdout }}'
    dest: '{{ misskey_dir }}/tor.txt'
    owner: root
    mode: '0644'