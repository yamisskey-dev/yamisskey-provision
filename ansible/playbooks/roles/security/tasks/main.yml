- name: Find cloudflared UUID file
  find:
    paths: '/home/{{ user_name }}/.cloudflared'
    patterns: '*.json'
  register: uuid_files

- name: Set tunnel UUID
  set_fact:
    tunnel_uuid: "{{ item.path | regex_replace('^.*/(.*)\\.json$', '\\1') }}"
  loop: '{{ uuid_files.files }}'
  when: uuid_files.matched > 0
  changed_when: false

- name: Debug tunnel_uuid
  debug:
    msg: 'Tunnel UUID: {{ tunnel_uuid }}'

- name: Set cloudflared config.yml content
  template:
    src: templates/cloudflared.config.yml.j2
    dest: '/etc/cloudflared/config.yml'
    owner: 'root'
    mode: '0600'
  vars:
    tunnel_uuid: '{{ tunnel_uuid.stdout }}'

- name: Install cloudflared as a system service
  command: cloudflared service install
  args:
    creates: /etc/systemd/system/cloudflared.service

- name: Reload systemd to apply new service file
  command: systemctl daemon-reload

- name: Restart cloudflared service
  systemd:
    name: cloudflared
    state: restarted
    enabled: true

- name: Reload Nginx
  systemd:
    name: nginx
    state: reloaded

- name: Ensure jq is installed
  apt:
    name: jq
    state: present
  become: true

- name: Retrieve Mullvad VPN token
  command: mullvad account get
  register: mullvad_account_info
  changed_when: false

- name: Set Mullvad VPN token
  set_fact:
    mullvad_token: "{{ mullvad_account_info.stdout_lines[1].split()[2] }}"

- name: Debug Mullvad VPN token
  debug:
    msg: "Mullvad VPN token: {{ mullvad_token }}"

- name: Ensure Mullvad VPN configuration directory exists
  file:
    path: /etc/mullvad-vpn
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true

- name: Create Mullvad VPN login token file
  copy:
    content: |
      {
        "token": "{{ mullvad_token }}"
      }
    dest: /etc/mullvad-vpn/account.conf
    owner: root
    group: root
    mode: '0600'
  become: true

- name: Set Mullvad VPN account token
  command: mullvad account login {{ mullvad_token }}
  become: true

- name: Ensure Mullvad VPN service is enabled and running
  systemd:
    name: mullvad-vpn
    state: started
    enabled: true
  become: true

- name: Check Mullvad VPN status
  command: mullvad status
  register: vpn_status
  changed_when: false

- name: Display Mullvad VPN status
  debug:
    msg: "Mullvad VPN status: {{ vpn_status.stdout }}"

- name: Backup original jail.conf
  copy:
    src: /etc/fail2ban/jail.conf
    dest: /etc/fail2ban/jail.conf.bak
    remote_src: yes
  become: true
  notify: Restart fail2ban

- name: Copy custom jail.local
  copy:
    src: '{{ set_dir }}/fail2ban/jail.local'
    dest: /etc/fail2ban/jail.local
  become: true
  notify: Restart fail2ban

- name: Ensure fail2ban is started and enabled
  systemd:
    name: fail2ban
    state: started
    enabled: true
  become: true

- name: Check fail2ban status for sshd
  command: fail2ban-client status sshd
  register: result
  failed_when: "'sshd' not in result.stdout"
  become: true

- name: Debug fail2ban status
  debug:
    msg: '{{ result.stdout }}'

- name: Ensure log directory for ClamAV exists
  file:
    path: /var/log/clamav
    state: directory
    owner: clamav
    group: adm
    mode: '0755'
  become: true

- name: Ensure freshclam log file is writable
  file:
    path: /var/log/clamav/freshclam.log
    state: touch
    owner: clamav
    group: adm
    mode: '0644'
  become: true

- name: Update ClamAV virus database
  command: freshclam
  become: true
  failed_when: false
  changed_when: false

- name: Ensure ClamAV daemon is started and enabled
  systemd:
    name: clamav-daemon
    state: started
    enabled: true
  become: true

- name: Schedule daily ClamAV scan
  cron:
    name: 'Daily ClamAV scan'
    minute: '0'
    hour: '2'
    job: "/usr/bin/clamscan -r / --exclude-dir='^/sys' --exclude-dir='^/proc' --exclude-dir='^/dev' --log=/var/log/clamav/clamav-$(date +\\%Y\\%m\\%d).log"
  become: true
