---
- name: Ensure required packages are installed
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - rsyslog
    - logrotate
    - ufw
    - tailscale
    - fail2ban
    - lynis
    - certbot
    - python3-certbot-dns-cloudflare
  become: true

- name: Ensure syslog user exists
  user:
    name: syslog
    state: present
    system: yes

- name: Backup and deploy rsyslog configuration
  block:
    - name: Backup original rsyslog.conf
      copy:
        src: /etc/rsyslog.conf
        dest: /etc/rsyslog.conf.bak
        remote_src: yes
      become: true

    - name: Deploy custom rsyslog configuration
      template:
        src: templates/rsyslog.conf.j2
        dest: /etc/rsyslog.conf
        owner: root
        group: root
        mode: '0644'
      notify: Validate rsyslog configuration

- name: Verify Cloudflare configuration exists
  stat:
    path: '/etc/cloudflare/cloudflare.ini'
  register: cloudflare_conf

- name: Fail if Cloudflare configuration does not exist
  fail:
    msg: 'Cloudflare configuration file /etc/cloudflare/cloudflare.ini does not exist.'
  when: not cloudflare_conf.stat.exists

- name: Obtain SSL certificate for main domain using certbot and Cloudflare DNS
  command: >
    certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/cloudflare/cloudflare.ini
    --dns-cloudflare-propagation-seconds 60 --server https://acme-v02.api.letsencrypt.org/directory
    -d {{ domain }} -m admin@{{ domain }} --agree-tos --non-interactive
  when: certbot_result_main is defined and certbot_result_main.stdout is defined and 
        "Certificate not yet due for renewal" not in certbot_result_main.stdout
  become: true
  register: certbot_result_main

- name: Display certbot result for main domain
  debug:
    msg: "{{ certbot_result_main.stdout | default('Certbot result not available') }}"
  when: certbot_result_main is defined and certbot_result_main.stdout is defined

- name: Obtain SSL certificate for each subdomain using certbot and Cloudflare DNS
  vars:
    subdomains:
      - "{{ synapse_server_name }}"
      - "{{ element_server_name }}"
      - "{{ jitsi_server_name }}"
      - "{{ minio_api_server_name }}"
      - "{{ minio_web_server_name }}"
      - "{{ vikunja_server_name }}"
      - "{{ ctfd_server_name }}"
      - "{{ grafana_server_name }}"
  command: >
    certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/cloudflare/cloudflare.ini
    --dns-cloudflare-propagation-seconds 60 --server https://acme-v02.api.letsencrypt.org/directory
    -d {{ item }} -m admin@{{ domain }} --agree-tos --non-interactive
  with_items: "{{ subdomains }}"
  become: true
  register: certbot_result_subdomains

- name: Display certbot result for each subdomain
  debug:
    msg: "{{ certbot_result_subdomains.results | map(attribute='stdout') | list }}"

- name: Deploy custom logrotate configuration for rsyslog
  template:
    src: templates/logrotate_rsyslog.j2
    dest: /etc/logrotate.d/rsyslog
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Configure UFW rules and service
  block:
    - name: Gather UFW status
      command: ufw status verbose
      register: ufw_status
      changed_when: false

    - name: Set default deny policy for incoming traffic if not already set
      command: ufw default deny incoming
      when: "'default: deny' not in ufw_status.stdout"
      become: true

    - name: Set default allow policy for outgoing traffic if not already set
      command: ufw default allow outgoing
      when: "'default: allow (outgoing)' not in ufw_status.stdout"
      become: true

    - name: Allow specified TCP ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: "{{ ufw_ports }}"
      become: true

    - name: Allow specified Tailscale UDP ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop: "{{ tailscale_ports }}"
      become: true

    - name: Allow QUIC and HTTP2 traffic to Cloudflare Tunnel for IPv4 addresses
      ufw:
        rule: allow
        port: "{{ cloudflared_quic_port }}"
        proto: udp
        to_ip: "{{ item }}"
      loop: "{{ cloudflare_region1_ips_v4 + cloudflare_region2_ips_v4 }}"
      become: true

    - name: Allow QUIC and HTTP2 traffic to Cloudflare Tunnel for IPv6 addresses
      ufw:
        rule: allow
        port: "{{ cloudflared_quic_port }}"
        proto: udp
        to_ip: "{{ item }}"
      loop: "{{ cloudflare_region1_ips_v6 + cloudflare_region2_ips_v6 }}"
      become: true

    - name: Optionally allow HTTPS traffic for Cloudflare services (IPv4)
      ufw:
        rule: allow
        port: "{{ cloudflared_https_port }}"
        proto: tcp
        to_ip: "{{ item }}"
      loop: "{{ cloudflare_region1_ips_v4 + cloudflare_region2_ips_v4 }}"
      become: true

    - name: Optionally allow HTTPS traffic for Cloudflare services (IPv6)
      ufw:
        rule: allow
        port: "{{ cloudflared_https_port }}"
        proto: tcp
        to_ip: "{{ item }}"
      loop: "{{ cloudflare_region1_ips_v6 + cloudflare_region2_ips_v6 }}"
      become: true

    - name: Open necessary ports for WARP and WireGuard
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop: "{{ warp_wireguard_ports }}"
      become: true

    - name: Allow Cloudflare WARP IP ranges
      ufw:
        rule: allow
        from: "{{ item }}"
      loop: "{{ cloudflare_warp_ips }}"
      become: true

    - name: Open necessary ports for QUIC (UDP 443)
      ufw:
        rule: allow
        port: 443
        proto: udp
      become: true

    - name: Allow UDP port 10000 for Jitsi media streaming
      ufw:
        rule: allow
        port: 10000
        proto: udp
      become: true

    - name: Ensure UFW logging is off
      command: ufw logging off
      ignore_errors: yes
      become: true

    - name: Reload UFW to apply changes
      command: ufw reload
      become: true

    - name: Check UFW status
      command: ufw status verbose
      register: ufw_status
      become: true

    - name: Display UFW status
      debug:
        msg: '{{ ufw_status.stdout }}'
  become: true

- name: Retrieve Tailscale status
  command: tailscale status
  register: tailscale_status
  changed_when: false

- name: Start Tailscale only if not already connected
  shell: tailscale up --ssh --accept-dns=false --reset
  when: tailscale_status is defined and 'Connected' not in tailscale_status.stdout
  register: tailscale_start

- name: Retrieve and parse Tailscale IP addresses
  block:
    - name: Retrieve Tailscale status
      command: tailscale status --json
      register: tailscale_status

    - name: Set Tailscale IPs
      set_fact:
        tailscale_ips: "{{ tailscale_status.stdout | from_json | json_query('Peer.*.TailscaleIPs') | flatten | select('match', '100\\..*') | list }}"

    - name: Allow SSH from Tailscale IPs
      ufw:
        rule: allow
        port: 22
        proto: tcp
        from_ip: '{{ item }}'
      loop: "{{ tailscale_ips }}"

    - name: Allow SSH from self Tailscale IP
      ufw:
        rule: allow
        port: 22
        proto: tcp
        from_ip: '{{ ansible_default_ipv4.address }}'
  become: true

- name: Configure SSH settings
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    create: yes
    line: '{{ item }}'
  loop:
    - 'Port 22'
    - 'Port 2222'
    - 'AuthorizedKeysFile .ssh/authorized_keys'
    - 'RSAAuthentication yes'
    - 'PubkeyAuthentication yes'
    - 'AllowTcpForwarding yes'
    - 'ClientAliveCountMax 3'
    - 'Compression no'
    - 'LogLevel INFO'
    - 'MaxAuthTries 10'
    - 'MaxSessions 10'
    - 'TCPKeepAlive yes'
    - 'X11Forwarding no'
    - 'AllowAgentForwarding yes'
  notify: Restart SSH service

- name: Backup and deploy fail2ban configuration
  block:
    - name: Backup original jail.conf
      copy:
        src: /etc/fail2ban/jail.conf
        dest: /etc/fail2ban/jail.conf.bak
        remote_src: yes
      become: true

    - name: Deploy fail2ban configuration
      template:
        src: jail.local.j2
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: '0644'
      notify: Restart fail2ban

- name: Ensure fail2ban service is enabled and started
  systemd:
    name: fail2ban
    enabled: yes
    state: started
  become: true

- name: Check fail2ban status for sshd
  command: fail2ban-client status sshd
  register: result
  failed_when: "'sshd' not in result.stdout"
  become: true

- name: Debug fail2ban status
  debug:
    msg: '{{ result.stdout }}'

- name: Ensure ClamAV configuration
  block:
    - name: Ensure log directory for ClamAV exists
      file:
        path: /var/log/clamav
        state: directory
        owner: clamav
        group: adm
        mode: '0755'
      become: true

    - name: Ensure freshclam log file is writable
      file:
        path: /var/log/clamav/freshclam.log
        state: touch
        owner: clamav
        group: adm
        mode: '0644'
      become: true

    - name: Update ClamAV virus database
      command: freshclam
      become: true
      failed_when: false
      changed_when: false

    - name: Ensure ClamAV daemon is started and enabled
      systemd:
        name: clamav-daemon
        state: started
        enabled: true
      become: true

    - name: Schedule daily ClamAV scan
      cron:
        name: 'Daily ClamAV scan'
        minute: '0'
        hour: '2'
        job: "/usr/bin/clamscan -r / --exclude-dir='^/sys' --exclude-dir='^/proc' --exclude-dir='^/dev' --log=/var/log/clamav/clamav-$(date +\\%Y\\%m\\%d).log"
      become: true

- name: Configure sysctl settings only if needed
  block:
    - name: Check if sysctl settings need to be applied
      shell: "sysctl -n {{ item.name }}"
      register: current_value
      loop: "{{ sysctl_settings }}"
      changed_when: current_value.stdout != item.value

    - name: Apply sysctl settings if changes are detected
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop: "{{ sysctl_settings }}"
  notify: Reload sysctl
  become: true

- name: Reload sysctl
  command: sysctl -p
  become: true

- name: Ensure systemd-resolved is enabled and started
  systemd:
    name: systemd-resolved
    state: started
    enabled: true
  become: true

- name: Configure systemd-resolved DNS servers
  block:
    - name: Set DNS in /etc/systemd/resolved.conf
      lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: '^#?DNS='
        line: 'DNS=1.1.1.1'
      become: true

    - name: Set FallbackDNS in /etc/systemd/resolved.conf
      lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: '^#?FallbackDNS='
        line: 'FallbackDNS=1.0.0.1'
      become: true

    - name: Restart systemd-resolved to apply DNS settings
      systemd:
        name: systemd-resolved
        state: restarted
      become: true

- name: Ensure /etc/resolv.conf points to systemd-resolved stub resolver
  file:
    src: /run/systemd/resolve/stub-resolv.conf
    dest: /etc/resolv.conf
    state: link
    force: yes
  become: true

- name: Configure Docker daemon DNS settings with Cloudflare DNS
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "dns": ["1.1.1.1", "1.0.0.1"]
      }
    mode: '0644'
  become: true

- name: Restart Docker daemon
  systemd:
    name: docker
    state: restarted
    enabled: true
  become: true

# DNS resolution test tasks remain as is
- name: Test DNS resolution with dig
  command: dig cloudflare.com
  register: dig_result
  changed_when: false

- name: Test DNS resolution with nslookup
  command: nslookup cloudflare.com
  register: nslookup_result
  changed_when: false

- name: Test DNS resolution with ping
  command: ping -c 3 cloudflare.com
  register: ping_result
  changed_when: false

- name: Display DNS test results
  debug:
    msg: |
      dig result: {{ dig_result.stdout }}
      nslookup result: {{ nslookup_result.stdout }}
      ping result: {{ ping_result.stdout }}
  become: true

- name: Test SRV record resolution with dig
  command: dig srv _origintunneld._tcp.argotunnel.com
  register: srv_dig_result
  changed_when: false

- name: Display SRV test results
  debug:
    msg: "SRV dig result: {{ srv_dig_result.stdout }}"
  become: true