# 1. Base System Setup
- name: Install prerequisites for Grafana
  apt:
    name: [apt-transport-https, software-properties-common, wget]
    state: present
    update_cache: yes

# 2. Network Setup
- name: Create Docker network for monitoring
  docker_network:
    name: monitoring
    state: present

# 3. Node Exporter Setup
- name: Check if Node Exporter service is running
  systemd:
    name: prometheus-node-exporter
    state: started
  register: node_exporter_status

- name: Verify Node Exporter metrics endpoint
  uri:
    url: http://localhost:9100/metrics
    method: GET
    status_code: 200
  register: node_exporter_metrics
  ignore_errors: yes

# 4. Prometheus Base Setup
- name: Ensure Prometheus is enabled and running
  systemd:
    name: prometheus
    enabled: yes
    state: started

# 5. Exporters Setup
## 5.1 cAdvisor Setup
- name: Deploy cAdvisor container
  docker_container:
    name: cadvisor
    image: "gcr.io/cadvisor/cadvisor:v0.49.1"
    state: started
    restart_policy: always
    ports:
      - "8085:8080"
    networks:
      - name: monitoring
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"

## 5.2 Blackbox Exporter Setup
- name: Create Blackbox Exporter config directory
  file:
    path: /etc/blackbox_exporter
    state: directory
    mode: '0755'

- name: Deploy Blackbox Exporter configuration
  template:
    src: blackbox.yml.j2
    dest: /etc/blackbox_exporter/blackbox.yml
    mode: '0644'
  register: blackbox_config

- name: Deploy Blackbox Exporter container
  docker_container:
    name: blackbox_exporter
    image: quay.io/prometheus/blackbox-exporter:latest
    state: started
    restart_policy: always
    network_mode: host
    volumes:
      - "/etc/blackbox_exporter:/config:ro"
    command: "--config.file=/config/blackbox.yml"

# 6. Grafana Setup
- name: Ensure /etc/apt/keyrings directory exists
  file:
    path: /etc/apt/keyrings
    state: directory

- name: Download and add Grafana GPG key
  get_url:
    url: https://apt.grafana.com/gpg.key
    dest: /tmp/grafana.gpg
  register: download_gpg

- name: Import Grafana GPG key
  shell: gpg --dearmor < /tmp/grafana.gpg | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
  when: download_gpg.changed

- name: Add Grafana stable repository
  lineinfile:
    path: /etc/apt/sources.list.d/grafana.list
    line: 'deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main'
    create: yes

- name: Update apt cache after adding new repositories
  apt:
    update_cache: yes

- name: Install Grafana
  apt:
    name: grafana
    state: present

- name: Ensure Grafana is enabled and running
  systemd:
    name: grafana-server
    enabled: yes
    state: started

# 7. Prometheus Final Configuration
- name: Deploy Prometheus configuration
  template:
    src: prometheus.yml.j2
    dest: /etc/prometheus/prometheus.yml
    owner: prometheus
    group: prometheus
    mode: '0644'
  register: prometheus_config

- name: Validate Prometheus config
  command: promtool check config /etc/prometheus/prometheus.yml
  changed_when: false
  register: config_check
  failed_when: config_check.rc != 0

- name: Restart Prometheus if configuration is valid
  systemd:
    name: prometheus
    state: restarted
  when: prometheus_config.changed or blackbox_config.changed

# 8. Nginx Configuration
# NOTE: nginx configuration now handled by ModSecurity-Nginx container
# Legacy nginx tasks commented out to avoid conflicts
# 
# - name: Deploy Grafana Nginx configuration
#   template:
#     src: nginx_grafana.conf.j2
#     dest: /etc/nginx/conf.d/grafana.conf
#     owner: root
#     group: root
#     mode: '0644'
#   notify:
#     - Reload Nginx
# 
# - name: Check if Nginx configuration exists for Grafana
#   stat:
#     path: /etc/nginx/conf.d/grafana.conf
#   register: grafana_nginx_conf
# 
# - name: Reload Nginx if configuration file exists
#   become: yes
#   become_user: root
#   systemd:
#     name: nginx
#     state: reloaded
#   when: grafana_nginx_conf.stat.exists

# 9. Final Health Checks
- name: Verify all services
  block:
    - name: Check service endpoints
      uri:
        url: "http://localhost:{{ item.port }}{{ item.path | default('/metrics') }}"
        method: GET
        status_code: 200
      loop:
        - { port: 9100, name: 'node-exporter' }
        - { port: 8085, name: 'cadvisor' }
        - { port: 9115, name: 'blackbox-exporter', path: '/probe?target=localhost&module=http_2xx' }
        - { port: 3000, name: 'grafana', path: '/api/health' }
      register: service_checks
  rescue:
    - name: Report service check failures
      debug:
        msg: "Service checks failed: {{ service_checks }}"