- name: Check if Node Exporter service is running
  systemd:
    name: prometheus-node-exporter
    state: started
  register: node_exporter_status

- name: Verify Node Exporter metrics endpoint
  uri:
    url: http://localhost:9100/metrics
    method: GET
    status_code: 200
  register: node_exporter_metrics
  ignore_errors: yes

# Prometheus Setup
- name: Ensure Prometheus is enabled and running
  systemd:
    name: prometheus
    enabled: yes
    state: started

# Grafana Setup
- name: Install prerequisites for Grafana
  apt:
    name:
      - apt-transport-https
      - software-properties-common
      - wget
    state: present
    update_cache: yes

- name: Ensure /etc/apt/keyrings directory exists
  file:
    path: /etc/apt/keyrings
    state: directory

- name: Download and add Grafana GPG key
  get_url:
    url: https://apt.grafana.com/gpg.key
    dest: /tmp/grafana.gpg
  register: download_gpg

- name: Import Grafana GPG key
  shell: gpg --dearmor < /tmp/grafana.gpg | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
  when: download_gpg.changed

- name: Add Grafana stable repository
  lineinfile:
    path: /etc/apt/sources.list.d/grafana.list
    line: 'deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main'
    create: yes

- name: Update apt cache after adding new repositories
  apt:
    update_cache: yes

- name: Install Grafana
  apt:
    name: grafana
    state: present

- name: Ensure Grafana is enabled and running
  systemd:
    name: grafana-server
    enabled: yes
    state: started

# Nginx Configuration for Grafana
- name: Deploy Grafana Nginx configuration
  template:
    src: nginx_grafana.conf.j2
    dest: /etc/nginx/conf.d/grafana.conf
    owner: root
    group: root
    mode: '0644'
  notify:
    - Reload Nginx

- name: Check if Nginx configuration exists for Grafana
  stat:
    path: /etc/nginx/conf.d/grafana.conf
  register: grafana_nginx_conf

- name: Fail if Nginx configuration does not exist for Grafana
  fail:
    msg: 'Nginx configuration file /etc/nginx/conf.d/grafana.conf does not exist.'
  when: not grafana_nginx_conf.stat.exists

# cAdvisor Setup
- name: Create Docker network for monitoring
  docker_network:
    name: monitoring
    state: present

- name: Deploy cAdvisor container
  docker_container:
    name: cadvisor
    image: "gcr.io/cadvisor/cadvisor:v0.49.1"
    state: started
    restart_policy: always
    ports:
      - "8080:8080"
    networks:
      - name: monitoring
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"

- name: Verify cAdvisor metrics endpoint
  uri:
    url: http://localhost:8080/metrics
    method: GET
    status_code: 200
  register: cadvisor_metrics
  ignore_errors: yes
  retries: 3
  delay: 10

# Final Nginx Configuration
- name: Reload Nginx if configuration file exists
  become: yes
  become_user: root
  systemd:
    name: nginx
    state: reloaded
  when: grafana_nginx_conf.stat.exists

- name: Update Prometheus scrape configs
  blockinfile:
    path: /etc/prometheus/prometheus.yml
    marker: "# {mark} ANSIBLE MANAGED BLOCK - MONITORING TARGETS"
    block: |
      scrape_configs:
        - job_name: 'node'
          static_configs:
            - targets: ['localhost:9100']
        
        - job_name: 'cadvisor'
          static_configs:
            - targets: ['localhost:8080']
  notify:
    - Restart Prometheus

- name: Verify all services
  block:
    - name: Check service endpoints
      uri:
        url: "http://localhost:{{ item.port }}{{ item.path | default('/metrics') }}"
        method: GET
        status_code: 200
      loop:
        - { port: 9100, name: 'node-exporter' }
        - { port: 8080, name: 'cadvisor' }
        - { port: 3000, name: 'grafana', path: '/api/health' }
      register: service_checks
  rescue:
    - name: Report service check failures
      debug:
        msg: "Service checks failed: {{ service_checks }}"