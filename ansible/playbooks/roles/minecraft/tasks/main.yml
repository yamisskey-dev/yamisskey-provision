# tasks/main.yml
- name: Create Minecraft directory
  file:
    path: '{{ minecraft_dir }}'
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

- name: Create Minecraft data directory
  file:
    path: '{{ minecraft_dir }}/data'
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

# secrets.ymlの存在確認
- name: Check if secrets file exists
  stat:
    path: '{{ minecraft_secrets_file }}'
  register: minecraft_secrets_file_stat

# 管理者UUIDの生成
- name: Generate admin UUID if not exists
  shell: 'python3 -c "import uuid; print(uuid.uuid4())"'
  register: admin_uuid_output
  when: not minecraft_secrets_file_stat.stat.exists

# RCONパスワードの生成
- name: Generate RCON password if not exists
  shell: 'cat /dev/urandom | tr -dc "a-zA-Z0-9" | fold -w 32 | head -n 1'
  register: rcon_password_output
  when: not minecraft_secrets_file_stat.stat.exists

# 秘密情報の設定
- name: Set secrets facts
  set_fact:
    admin_uuid: "{{ (lookup('file', minecraft_secrets_file) | from_yaml).admin_uuid if minecraft_secrets_file_stat.stat.exists else admin_uuid_output.stdout }}"
    rcon_password: "{{ (lookup('file', minecraft_secrets_file) | from_yaml).rcon_password if minecraft_secrets_file_stat.stat.exists else rcon_password_output.stdout }}"

# 秘密情報の保存（初回のみ）
- name: Save secrets to file
  copy:
    dest: '{{ minecraft_secrets_file }}'
    content: |
      admin_uuid: "{{ admin_uuid }}"
      rcon_password: "{{ rcon_password }}"
    mode: '0600'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  when: not minecraft_secrets_file_stat.stat.exists

# ops.jsonの作成
- name: Create ops.json
  copy:
    dest: '{{ minecraft_dir }}/data/ops.json'
    content: |
      [
        {
          "uuid": "{{ admin_uuid }}",
          "name": "admin",
          "level": 4,
          "bypassesPlayerLimit": true
        }
      ]
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  when: not minecraft_secrets_file_stat.stat.exists

# 環境変数ファイルの配置
- name: Copy .env file
  template:
    src: minecraft.env.j2
    dest: '{{ minecraft_dir }}/.env'
    mode: '0600'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# Docker Compose設定の展開
- name: Copy docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: '{{ minecraft_dir }}/docker-compose.yml'
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# プラグイン設定ディレクトリの作成
- name: Create Minecraft plugins config directories
  file:
    path: '{{ item }}'
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  loop:
    - '{{ minecraft_dir }}/data/plugins'
    - '{{ minecraft_dir }}/data/plugins/Geyser-Spigot'
    - '{{ minecraft_dir }}/data/plugins/floodgate'

# Geyser設定ファイルの配置
- name: Copy Geyser config
  template:
    src: geyser-config.yml.j2
    dest: '{{ minecraft_dir }}/data/plugins/Geyser-Spigot/config.yml'
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# Floodgate設定ファイルの配置
- name: Copy Floodgate config
  template:
    src: floodgate-config.yml.j2
    dest: '{{ minecraft_dir }}/data/plugins/floodgate/config.yml'
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# server.propertiesの配置
- name: Copy server.properties
  template:
    src: server.properties.j2
    dest: '{{ minecraft_dir }}/data/server.properties'
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# サーバーの起動
- name: Start Minecraft server
  community.docker.docker_compose:
    project_src: '{{ minecraft_dir }}'
    state: present
    pull: yes

- name: Enable and start Docker service
  systemd:
    name: docker
    state: started
    enabled: yes

# PlayIt.gg APTパッケージのインストールと設定（ARM64対応）
- name: PlayIt.gg setup helper
  block:
    - name: Install required packages for PlayIt.gg
      apt:
        name:
          - curl
          - gnupg
        state: present
        update_cache: yes
      become: true

    - name: Download and install PlayIt.gg APT package
      shell: |
        curl -SsL https://playit.gg/install.sh | sudo bash
      args:
        creates: /usr/local/bin/playit
      become: true

    - name: Check if PlayIt secret key is needed
      set_fact:
        playit_needs_setup: "{{ playit_secret_key is not defined or playit_secret_key == '' }}"

    - name: Generate PlayIt claim code automatically (APT version)
      block:
        - name: Create temporary PlayIt configuration directory
          file:
            path: /tmp/playit-setup
            state: directory
            mode: '0700'
          become: true

        - name: Run PlayIt setup in background for claim code extraction
          shell: |
            timeout 30 /usr/local/bin/playit --stdout 2>&1 | tee /tmp/playit-setup/output.log &
            PID=$!
            sleep 15
            kill $PID 2>/dev/null || true
            wait $PID 2>/dev/null || true
          args:
            chdir: /tmp/playit-setup
          become: true
          register: playit_setup_result
          ignore_errors: yes

        - name: Extract claim code from PlayIt output
          shell: |
            grep -oP 'claim code is: \K[A-Z0-9-]+' /tmp/playit-setup/output.log | head -1 || echo "NOT_FOUND"
          register: playit_claim_code_result
          changed_when: false
          become: true

        - name: Extract claim URL from PlayIt output
          shell: |
            grep -oP 'https://playit\.gg/claim/[A-Z0-9-]+' /tmp/playit-setup/output.log | head -1 || echo "NOT_FOUND"
          register: playit_claim_url_result
          changed_when: false
          become: true

        - name: Auto-save claim code to vars file
          lineinfile:
            path: "{{ playbook_dir }}/roles/minecraft/vars/main.yml"
            regexp: '^playit_secret_key:'
            line: 'playit_secret_key: "{{ playit_claim_code_result.stdout }}"'
            backup: yes
          when: playit_claim_code_result.stdout != "NOT_FOUND"
          delegate_to: localhost

        - name: Update runtime variable with extracted claim code
          set_fact:
            playit_secret_key: "{{ playit_claim_code_result.stdout }}"
          when: playit_claim_code_result.stdout != "NOT_FOUND"

        - name: Display PlayIt setup information
          debug:
            msg: |
              ===============================================
              🔗 PlayIt.gg セットアップ - 自動設定完了
              ===============================================
              
              ✅ Claim Code: {{ playit_claim_code_result.stdout }}
              🔗 セットアップURL: {{ playit_claim_url_result.stdout }}
              
              📋 次のステップ:
              1. 上記URLにアクセスしてPlayIt.ggアカウントにリンク
              2. リンク完了後、PlayItサービスが自動的に開始されます
              
              ⚠️ 重要:
              - Claim Codeは自動的にvars/main.ymlに保存されました
              - アカウントリンク後、systemdサービスが自動で開始されます
              ===============================================
          when: playit_claim_code_result.stdout != "NOT_FOUND"

        - name: Show PlayIt setup logs if claim code not found
          shell: cat /tmp/playit-setup/output.log 2>/dev/null || echo "No output log found"
          register: playit_logs
          when: playit_claim_code_result.stdout == "NOT_FOUND"
          become: true

        - name: Display troubleshooting information
          debug:
            msg: |
              ⚠️ PlayIt Claim Codeの自動取得に失敗しました
              
              以下のログを確認してください:
              {{ playit_logs.stdout }}
              
              手動設定方法:
              1. sudo /usr/local/bin/playit --setup
              2. 表示されるClaim CodeとURLをメモ
              3. vars/main.ymlにplayit_secret_key: "YOUR_CLAIM_CODE"を設定
          when: playit_claim_code_result.stdout == "NOT_FOUND"

        - name: Clean up temporary setup directory
          file:
            path: /tmp/playit-setup
            state: absent
          become: true

      when: playit_needs_setup and (playit_enabled | default(false))
  when: playit_enabled | default(false)

- name: Create playit systemd service
  template:
    src: playit.service.j2
    dest: /etc/systemd/system/playit.service
    mode: '0644'
  become: true
  notify:
    - reload systemd
    - restart playit
  when: (playit_enabled | default(false)) and (playit_secret_key is defined and playit_secret_key != "")

- name: Start and enable playit service
  systemd:
    name: playit
    state: started
    enabled: yes
    daemon_reload: yes
  become: true
  when: (playit_enabled | default(false)) and (playit_secret_key is defined and playit_secret_key != "")