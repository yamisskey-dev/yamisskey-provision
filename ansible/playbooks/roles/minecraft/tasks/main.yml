# tasks/main.yml
- name: Create Minecraft directory
  file:
    path: '{{ minecraft_dir }}'
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

- name: Create Minecraft data directory
  file:
    path: '{{ minecraft_dir }}/data'
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

# secrets.ymlの存在確認
- name: Check if secrets file exists
  stat:
    path: '{{ minecraft_secrets_file }}'
  register: minecraft_secrets_file_stat

# 管理者UUIDの生成
- name: Generate admin UUID if not exists
  shell: 'python3 -c "import uuid; print(uuid.uuid4())"'
  register: admin_uuid_output
  when: not minecraft_secrets_file_stat.stat.exists

# RCONパスワードの生成
- name: Generate RCON password if not exists
  shell: 'cat /dev/urandom | tr -dc "a-zA-Z0-9" | fold -w 32 | head -n 1'
  register: rcon_password_output
  when: not minecraft_secrets_file_stat.stat.exists

# 秘密情報の設定
- name: Set secrets facts
  set_fact:
    admin_uuid: "{{ (lookup('file', minecraft_secrets_file) | from_yaml).admin_uuid if minecraft_secrets_file_stat.stat.exists else admin_uuid_output.stdout }}"
    rcon_password: "{{ (lookup('file', minecraft_secrets_file) | from_yaml).rcon_password if minecraft_secrets_file_stat.stat.exists else rcon_password_output.stdout }}"

# 秘密情報の保存（初回のみ）
- name: Save secrets to file
  copy:
    dest: '{{ minecraft_secrets_file }}'
    content: |
      admin_uuid: "{{ admin_uuid }}"
      rcon_password: "{{ rcon_password }}"
    mode: '0600'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  when: not minecraft_secrets_file_stat.stat.exists

# ops.jsonの作成
- name: Create ops.json
  copy:
    dest: '{{ minecraft_dir }}/data/ops.json'
    content: |
      [
        {
          "uuid": "{{ admin_uuid }}",
          "name": "admin",
          "level": 4,
          "bypassesPlayerLimit": true
        }
      ]
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  when: not minecraft_secrets_file_stat.stat.exists

# 環境変数ファイルの配置
- name: Copy .env file
  template:
    src: minecraft.env.j2
    dest: '{{ minecraft_dir }}/.env'
    mode: '0600'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# Docker Compose設定の展開
- name: Copy docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: '{{ minecraft_dir }}/docker-compose.yml'
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# プラグイン設定ディレクトリの作成
- name: Create Minecraft plugins config directories
  file:
    path: '{{ item }}'
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  loop:
    - '{{ minecraft_dir }}/data/plugins'
    - '{{ minecraft_dir }}/data/plugins/Geyser-Spigot'
    - '{{ minecraft_dir }}/data/plugins/floodgate'

# Geyser設定ファイルの配置
- name: Copy Geyser config
  template:
    src: geyser-config.yml.j2
    dest: '{{ minecraft_dir }}/data/plugins/Geyser-Spigot/config.yml'
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# Floodgate設定ファイルの配置
- name: Copy Floodgate config
  template:
    src: floodgate-config.yml.j2
    dest: '{{ minecraft_dir }}/data/plugins/floodgate/config.yml'
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# server.propertiesの配置
- name: Copy server.properties
  template:
    src: server.properties.j2
    dest: '{{ minecraft_dir }}/data/server.properties'
    mode: '0644'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  notify: restart minecraft

# サーバーの起動
- name: Start Minecraft server
  community.docker.docker_compose:
    project_src: '{{ minecraft_dir }}'
    state: present
    pull: yes

- name: Enable and start Docker service
  systemd:
    name: docker
    state: started
    enabled: yes

# PlayIt.gg APTパッケージのインストールと設定（ARM64対応）
- name: PlayIt.gg setup helper
  block:
    - name: Install required packages for PlayIt.gg
      apt:
        name:
          - curl
          - gnupg
        state: present
        update_cache: yes
      become: true

    - name: Add PlayIt.gg APT repository key
      shell: |
        curl -SsL https://playit-cloud.github.io/ppa/key.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/playit.gpg >/dev/null
      args:
        creates: /etc/apt/trusted.gpg.d/playit.gpg
      become: true

    - name: Add PlayIt.gg APT repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/trusted.gpg.d/playit.gpg] https://playit-cloud.github.io/ppa/data ./"
        filename: playit-cloud
        state: present
        update_cache: yes
      become: true

    - name: Install PlayIt.gg package
      apt:
        name: playit
        state: present
      become: true

    - name: Display PlayIt.gg manual setup information
      debug:
        msg: |
          ===============================================
          🔗 PlayIt.gg セットアップ - 手動設定
          ===============================================
          
          ✅ PlayIt.ggパッケージのインストール完了
          
          📋 手動セットアップ手順:
          1. sudo /usr/local/bin/playit
             (初回実行でClaim CodeとURLが表示されます)
          
          2. 表示されたURLにアクセスしてアカウント設定
          
          3. サービス開始:
             sudo systemctl start playit.service
             sudo systemctl enable playit.service
          
          ⚠️ 重要:
          - 初回セットアップは手動で行ってください
          - アカウント設定後、サービスを手動で開始してください
          ===============================================
  when: playit_enabled | default(false)

- name: Create playit systemd service template
  template:
    src: playit.service.j2
    dest: /etc/systemd/system/playit.service
    mode: '0644'
  become: true
  when: playit_enabled | default(false)

- name: Reload systemd daemon for playit service
  systemd:
    daemon_reload: yes
  become: true
  when: playit_enabled | default(false)