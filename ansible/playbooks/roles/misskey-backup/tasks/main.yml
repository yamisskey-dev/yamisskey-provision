- name: Ensure backup directory exists
  file:
    path: /misskey-data/backups
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'

- name: Ensure misskey-backup directory exists
  file:
    path: /opt/misskey-backup
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'

- name: Ensure config directory exists
  file:
    path: /opt/misskey-backup/config
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'

- name: Ensure src directory exists
  file:
    path: /opt/misskey-backup/src
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'

- name: Copy Dockerfile to target
  copy:
    src: '{{ backup_script_dir }}/Dockerfile'
    dest: /opt/misskey-backup/Dockerfile
  notify:
    - Restart backup container

- name: Copy docker-compose.yaml to target
  copy:
    src: '{{ backup_script_dir }}/compose.yaml'
    dest: /opt/misskey-backup/docker-compose.yaml
  notify:
    - Restart backup container

- name: Copy env.yml file to target
  copy:
    src: '{{ backup_script_dir }}/env.yml'
    dest: /opt/misskey-backup/config/env.yml
  notify:
    - Restart backup container

- name: Copy backup.sh to target
  copy:
    src: '{{ backup_script_dir }}/src/backup.sh'
    dest: /opt/misskey-backup/src/backup.sh
  notify:
    - Restart backup container

- name: Copy crontab file to target
  copy:
    src: '{{ backup_script_dir }}/config/crontab'
    dest: /opt/misskey-backup/config/crontab
  notify:
    - Restart backup container

- name: Create rclone config file
  template:
    src: templates/rclone.conf.j2
    dest: /opt/misskey-backup/config/rclone.conf
  notify:
    - Restart backup container

- name: Ensure misskey-postgres network exists
  docker_network:
    name: misskey-postgres
    state: present
    driver: bridge

- name: Pull and build Docker images
  docker_compose:
    project_src: /opt/misskey-backup
    state: present
    pull: yes
    build: yes

- name: Start Docker Compose services
  docker_compose:
    project_src: /opt/misskey-backup
    state: present

- name: Run manual backup script
  command: sudo docker exec backup /root/backup.sh

- name: Load secrets from secrets.yml
  include_vars:
    file: '{{ misskey_backup_secrets_file }}'

- name: Log in to DockerHub
  docker_login:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
  register: login_output
  failed_when: login_output.failed

- name: Log in to GitHub Container Registry
  docker_login:
    registry: ghcr.io
    username: "{{ github_username }}"
    password: "{{ github_token }}"
  register: ghcr_login_output
  failed_when: ghcr_login_output.failed

- name: Tag and push Docker images to registries
  shell: |
    # Set timestamp tag
    TIMESTAMP_TAG="{{ ansible_date_time.iso8601_basic }}"

    # DockerHub tagging and pushing
    DOCKERHUB_IMAGE="{{ organization_name }}/misskey-web"
    docker tag misskey-web:latest "${DOCKERHUB_IMAGE}:${TIMESTAMP_TAG}"
    docker tag misskey-web:latest "${DOCKERHUB_IMAGE}:latest"
    docker push "${DOCKERHUB_IMAGE}:latest"
    docker push "${DOCKERHUB_IMAGE}:${TIMESTAMP_TAG}"

    # GitHub Container Registry tagging and pushing
    GHCR_IMAGE="ghcr.io/{{ organization_name }}/misskey-web"
    docker tag misskey-web:latest "${GHCR_IMAGE}:${TIMESTAMP_TAG}"
    docker tag misskey-web:latest "${GHCR_IMAGE}:latest"
    docker push "${GHCR_IMAGE}:latest"
    docker push "${GHCR_IMAGE}:${TIMESTAMP_TAG}"
  args:
    executable: /bin/bash
  register: registry_push_output
  failed_when: registry_push_output.rc != 0

- name: Ensure backup directory
  file:
    path: '{{ backup_dir }}/misskey'
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create tarball of Misskey directory
  shell: sudo tar -czvf {{ backup_dir }}/misskey/misskey-backup-{{ ansible_date_time.iso8601_basic }}.tar.gz -C {{ misskey_dir }} .
  register: backup_output
  failed_when: backup_output.rc != 0