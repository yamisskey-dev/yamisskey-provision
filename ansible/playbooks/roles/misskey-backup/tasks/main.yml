- name: Create backup directory structure
  file:
    path: "{{ item }}"
    state: directory 
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'
  loop:
    - "{{ backup_dir }}/misskey"
    - "/opt/misskey-backup"
    - "/opt/misskey-backup/config"
    - "/opt/misskey-backup/src"
    - "/opt/misskey-backup/backups"

- name: Clone misskey-backup repository
  git:
    repo: "https://github.com/yamisskey/yamisskey-backup.git"
    dest: "/opt/misskey-backup"
    version: "main"
    force: yes
  register: git_clone

- name: Create rclone config file
  template:
    src: templates/rclone.conf.j2
    dest: /opt/misskey-backup/config/rclone.conf
    mode: '0644'
  notify: Restart backup container

- name: Pull and build Docker images
  docker_compose:
    project_src: /opt/misskey-backup
    state: present
    pull: yes
    build: yes

- name: Start Docker Compose services
  docker_compose:
    project_src: /opt/misskey-backup
    state: present

- name: Run manual backup script
  command: sudo docker exec backup /root/backup.sh

- name: Load secrets from secrets.yml
  include_vars:
    file: '{{ misskey_backup_secrets_file }}'

- name: Log in to DockerHub
  docker_login:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
  register: login_output
  failed_when: login_output.failed

- name: Log in to GitHub Container Registry
  docker_login:
    registry: ghcr.io
    username: "{{ github_org }}"
    password: "{{ github_classic_token }}"
  register: ghcr_login_output
  failed_when: ghcr_login_output.failed

- name: Verify Docker image exists
  shell: docker image inspect misskey-web:latest
  register: image_exists
  ignore_errors: true

- name: Tag and push Docker images to registries
  shell: |
    # Set timestamp tag
    TIMESTAMP_TAG="{{ ansible_date_time.iso8601_basic }}"
    IMAGE_NAME="misskey-web"

    # Verify image exists
    if ! docker image inspect ${IMAGE_NAME}:latest >/dev/null 2>&1; then
      echo "Error: Image ${IMAGE_NAME}:latest not found"
      exit 1
    fi

    # DockerHub tagging and pushing
    DOCKERHUB_IMAGE="{{ github_org }}/${IMAGE_NAME}"
    docker tag ${IMAGE_NAME}:latest "${DOCKERHUB_IMAGE}:${TIMESTAMP_TAG}"
    docker tag ${IMAGE_NAME}:latest "${DOCKERHUB_IMAGE}:latest"
    docker push "${DOCKERHUB_IMAGE}:latest"
    docker push "${DOCKERHUB_IMAGE}:${TIMESTAMP_TAG}"

    # GitHub Container Registry tagging and pushing
    GHCR_IMAGE="ghcr.io/{{ github_org }}/${IMAGE_NAME}"
    docker tag ${IMAGE_NAME}:latest "${GHCR_IMAGE}:${TIMESTAMP_TAG}"
    docker tag ${IMAGE_NAME}:latest "${GHCR_IMAGE}:latest"
    docker push "${GHCR_IMAGE}:latest"
    docker push "${GHCR_IMAGE}:${TIMESTAMP_TAG}"
  args:
    executable: /bin/bash
  register: registry_push_output
  failed_when: registry_push_output.rc != 0
  when: image_exists.rc == 0

- name: Create tarball of Misskey directory
  shell: sudo tar -czvf {{ backup_dir }}/misskey/misskey-backup-{{ ansible_date_time.iso8601_basic }}.tar.gz -C {{ misskey_dir }} .
  register: backup_output
  failed_when: backup_output.rc != 0