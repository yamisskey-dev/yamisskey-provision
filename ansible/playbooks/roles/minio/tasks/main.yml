- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /opt/minio
    - /opt/minio/minio-data

- name: Check if secrets.yml exists
  stat:
    path: "{{ minio_secrets_file }}"
  register: secrets_file_stat

- name: Load existing secrets from secrets.yml
  set_fact:
    existing_secrets: "{{ lookup('file', minio_secrets_file) | from_yaml }}"
  when: secrets_file_stat.stat.exists

- name: Initialize empty secrets structure if file doesn't exist
  set_fact:
    existing_secrets:
      minio: {}
  when: not secrets_file_stat.stat.exists

- name: Generate all credentials (auto-generate missing ones)
  set_fact:
    minio_root_user: "{{ existing_secrets.minio.root_user | default(lookup('password', '/dev/null chars=ascii_letters,digits length=32')) }}"
    minio_root_password: "{{ existing_secrets.minio.root_password | default(lookup('password', '/dev/null chars=ascii_letters,digits length=64')) }}"
    misskey_s3_access_key: "{{ existing_secrets.minio.misskey_s3_access_key | default(ansible_hostname + '-' + ansible_date_time.epoch) }}"
    misskey_s3_secret_key: "{{ existing_secrets.minio.misskey_s3_secret_key | default(lookup('password', '/dev/null chars=ascii_letters,digits length=32')) }}"
    minio_kms_master_key: "{{ existing_secrets.minio.kms_master_key | default('minio-master-key:' + (lookup('password', '/dev/null chars=ascii_letters,digits,+,/ length=44') | b64encode)) }}"

- name: Create/update secrets.yml with all credentials
  copy:
    content: |
      minio:
        root_user: "{{ minio_root_user }}"
        root_password: "{{ minio_root_password }}"
        misskey_s3_access_key: "{{ misskey_s3_access_key }}"
        misskey_s3_secret_key: "{{ misskey_s3_secret_key }}"
        kms_master_key: "{{ minio_kms_master_key }}"
    dest: "{{ minio_secrets_file }}"
    backup: yes
    mode: '0600'

- name: Deploy Docker Compose file for Minio
  template:
    src: templates/minio_docker-compose.yml.j2
    dest: /opt/minio/docker-compose.yml
    owner: root
    group: root
    mode: '0644'

- name: Create Docker network if not exists
  docker_network:
    name: external_network
    state: present

- name: Start Minio using Docker Compose v2
  community.docker.docker_compose_v2:
    project_src: /opt/minio
    state: present

- name: Allow MinIO access from Tailscale network
  ufw:
    rule: allow
    port: 9000
    from_ip: 100.64.0.0/10
  become: yes

- name: Wait for MinIO to be ready
  wait_for:
    host: localhost
    port: 9000
    timeout: 30

- name: Check if Minio Client exists
  stat:
    path: /usr/local/bin/mc
  register: mc_check

- name: Download Minio Client (architecture-aware)
  get_url:
    url: "https://dl.min.io/client/mc/release/linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}/mc"
    dest: /usr/local/bin/mc
    mode: '0755'
  when: not mc_check.stat.exists

- name: Get MinIO container IP
  community.docker.docker_container_info:
    name: minio
  register: minio_container_info

- name: Set Minio Client alias
  command: >
    /usr/local/bin/mc alias set "{{ minio_alias }}"
    http://{{ minio_container_info.container.NetworkSettings.Networks.external_network.IPAddress }}:9000
    "{{ minio_root_user }}"
    "{{ minio_root_password }}"
  register: mc_alias_result
  changed_when: mc_alias_result.rc == 0

- name: Create and configure secure buckets
  block:
    - name: Check if files bucket exists
      command: /usr/local/bin/mc ls "{{ minio_alias }}/{{ minio_bucket_name_for_misskey }}"
      register: files_bucket_check
      ignore_errors: yes
      changed_when: false

    - name: Check if assets bucket exists
      command: /usr/local/bin/mc ls "{{ minio_alias }}/{{ minio_bucket_name_for_outline }}"
      register: assets_bucket_check
      ignore_errors: yes
      changed_when: false

    - name: Create files bucket if not exists
      command: /usr/local/bin/mc mb "{{ minio_alias }}/{{ minio_bucket_name_for_misskey }}"
      when: files_bucket_check.rc != 0

    - name: Create assets bucket if not exists
      command: /usr/local/bin/mc mb "{{ minio_alias }}/{{ minio_bucket_name_for_outline }}"
      when: assets_bucket_check.rc != 0

    - name: Create Misskey IAM user
      command: /usr/local/bin/mc admin user add "{{ minio_alias }}" "{{ misskey_s3_access_key }}" "{{ misskey_s3_secret_key }}"
      register: misskey_user_result
      ignore_errors: yes
      changed_when: misskey_user_result.rc == 0
      failed_when: misskey_user_result.rc != 0 and "UserAlreadyExists" not in misskey_user_result.stderr
      no_log: true

    - name: Deploy IAM policy template
      template:
        src: templates/minio_iam_policy.json.j2
        dest: /tmp/minio_iam_policy.json
        mode: '0600'

    - name: Create IAM policy for Misskey user
      command: /usr/local/bin/mc admin policy create "{{ minio_alias }}" misskey-policy /tmp/minio_iam_policy.json
      register: policy_create_result
      changed_when: policy_create_result.rc == 0

    - name: Clean up temporary policy file
      file:
        path: /tmp/minio_iam_policy.json
        state: absent

    - name: Attach policy to Misskey user
      command: /usr/local/bin/mc admin policy attach "{{ minio_alias }}" misskey-policy --user "{{ misskey_s3_access_key }}"
      register: policy_attach_result
      changed_when: policy_attach_result.rc == 0

    - name: Deploy bucket policy template
      template:
        src: templates/minio_cors_policy.json.j2
        dest: /tmp/minio_bucket_policy.json
        mode: '0600'

    - name: Apply secure bucket policy for ActivityPub federation access control
      command: /usr/local/bin/mc anonymous set download "{{ minio_alias }}/{{ item }}"
      loop:
        - "{{ minio_bucket_name_for_misskey }}"
        - "{{ minio_bucket_name_for_outline }}"
      register: bucket_policy_result
      changed_when: bucket_policy_result.rc == 0

    - name: Apply advanced bucket policy for User-Agent based access control
      command: /usr/local/bin/mc admin policy create "{{ minio_alias }}" bucket-policy-{{ item }} /tmp/minio_bucket_policy.json
      loop:
        - "{{ minio_bucket_name_for_misskey }}"
        - "{{ minio_bucket_name_for_outline }}"
      register: advanced_policy_result
      changed_when: advanced_policy_result.rc == 0
      ignore_errors: yes

    - name: Clean up temporary bucket policy file
      file:
        path: /tmp/minio_bucket_policy.json
        state: absent

    - name: Enable Server-Side Encryption (SSE-S3) for data at rest protection
      command: /usr/local/bin/mc encrypt set sse-s3 "{{ minio_alias }}/{{ item }}"
      loop:
        - "{{ minio_bucket_name_for_misskey }}"
        - "{{ minio_bucket_name_for_outline }}"
      ignore_errors: yes
      register: encryption_result
      failed_when: encryption_result.rc != 0 and "already enabled" not in encryption_result.stderr

    - name: Display essential configuration summary
      debug:
        msg: |
          ==============================================
          MinIO Essential Security Configuration Complete
          ==============================================
          ‚úÖ Web UI disabled (CLI management only)
          ‚úÖ Buckets: {{ minio_bucket_name_for_misskey }}, {{ minio_bucket_name_for_outline }}
          ‚úÖ IAM User: {{ misskey_s3_access_key }} (auto-generated, restricted permissions)
          ‚úÖ Server-Side Encryption enabled with KMS (privacy protection)
          ‚úÖ KMS Master Key: {{ minio_kms_master_key }} (auto-generated)
          ‚úÖ Federation access enabled (ActivityPub platforms)
          ‚úÖ Direct browser access prevention (Nginx layer)
          ‚úÖ Tailscale network access (internal communication)
          ‚úÖ Rate limiting (basic DDoS protection)
          
          üîë Misskey Configuration (balthasar):
          S3_BUCKET={{ minio_bucket_name_for_misskey }}
          S3_ENDPOINT=http://[TAILSCALE_RASPBERRYPI_IP]:9000
          S3_ACCESS_KEY={{ misskey_s3_access_key }}
          S3_SECRET_KEY={{ misskey_s3_secret_key }}
          S3_BASE_URL=https://{{ minio_api_server_name }}/{{ minio_bucket_name_for_misskey }}
          
          üîë Outline Configuration:
          AWS_ACCESS_KEY_ID={{ misskey_s3_access_key }}
          AWS_SECRET_ACCESS_KEY={{ misskey_s3_secret_key }}
          AWS_S3_UPLOAD_BUCKET_NAME={{ minio_bucket_name_for_outline }}
          AWS_S3_UPLOAD_BUCKET_URL=https://{{ minio_api_server_name }}/{{ minio_bucket_name_for_outline }}
          
          üîê Save to secrets.yml for persistence:
          minio:
            kms_master_key: "{{ minio_kms_master_key }}"
          
          ÔøΩ Testing Steps:
          1. ‚úÖ Tailscale connectivity: balthasar ‚Üí raspberrypi
          2. ‚úÖ Misskey file upload functionality
          3. ‚úÖ Federation image display via Cloudflare
          4. ‚úÖ URL preservation: https://{{ minio_api_server_name }}/{{ minio_bucket_name_for_misskey }}/
          ==============================================
