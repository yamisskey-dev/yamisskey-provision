- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /opt/minio
    - /opt/minio/minio-data

- name: Load Minio secrets from secrets.yml
  set_fact:
    minio_root_user: "{{ (lookup('file', minio_secrets_file) | from_yaml).minio.root_user }}"
    minio_root_password: "{{ (lookup('file', minio_secrets_file) | from_yaml).minio.root_password }}"
    misskey_s3_secret_key: "{{ (lookup('file', minio_secrets_file) | from_yaml).minio.misskey_s3_secret_key }}"

- name: Deploy Docker Compose file for Minio
  template:
    src: templates/minio_docker-compose.yml.j2
    dest: /opt/minio/docker-compose.yml
    owner: root
    group: root
    mode: '0644'

- name: Create Docker network if not exists
  docker_network:
    name: external_network
    state: present

- name: Start Minio using Docker Compose
  docker_compose:
    project_src: /opt/minio
    state: present

- name: Allow MinIO access from Tailscale network
  ufw:
    rule: allow
    port: 9000
    from_ip: 100.64.0.0/10
  become: yes

- name: Wait for MinIO to be ready
  wait_for:
    host: localhost
    port: 9000
    timeout: 30

- name: Check if Minio Client exists
  stat:
    path: /usr/local/bin/mc
  register: mc_check

- name: Download Minio Client
  get_url:
    url: https://dl.min.io/client/mc/release/linux-amd64/mc
    dest: /usr/local/bin/mc
    mode: '0755'
  when: not mc_check.stat.exists

- name: Get MinIO container IP
  community.docker.docker_container_info:
    name: minio
  register: minio_container_info

- name: Set Minio Client alias
  command: >
    /usr/local/bin/mc alias set "{{ minio_alias }}"
    http://{{ minio_container_info.container.NetworkSettings.Networks.external_network.IPAddress }}:9000
    "{{ minio_root_user }}"
    "{{ minio_root_password }}"
  register: mc_alias_result
  changed_when: mc_alias_result.rc == 0

- name: Create and configure secure buckets
  block:
    - name: Check if files bucket exists
      command: /usr/local/bin/mc ls "{{ minio_alias }}/{{ minio_bucket_name_for_misskey }}"
      register: files_bucket_check
      ignore_errors: yes
      changed_when: false

    - name: Check if assets bucket exists
      command: /usr/local/bin/mc ls "{{ minio_alias }}/{{ minio_bucket_name_for_outline }}"
      register: assets_bucket_check
      ignore_errors: yes
      changed_when: false

    - name: Create files bucket if not exists
      command: /usr/local/bin/mc mb "{{ minio_alias }}/{{ minio_bucket_name_for_misskey }}"
      when: files_bucket_check.rc != 0

    - name: Create assets bucket if not exists
      command: /usr/local/bin/mc mb "{{ minio_alias }}/{{ minio_bucket_name_for_outline }}"
      when: assets_bucket_check.rc != 0

    - name: Create Misskey IAM user
      command: /usr/local/bin/mc admin user add "{{ minio_alias }}" misskey-user "{{ misskey_s3_secret_key }}"
      register: misskey_user_result
      ignore_errors: yes
      changed_when: misskey_user_result.rc == 0
      failed_when: misskey_user_result.rc != 0 and "UserAlreadyExists" not in misskey_user_result.stderr
      no_log: true

    - name: Deploy IAM policy template
      template:
        src: templates/minio_iam_policy.json.j2
        dest: /tmp/minio_iam_policy.json
        mode: '0600'

    - name: Create IAM policy for Misskey user
      command: /usr/local/bin/mc admin policy create "{{ minio_alias }}" misskey-policy /tmp/minio_iam_policy.json
      register: policy_create_result
      changed_when: policy_create_result.rc == 0

    - name: Clean up temporary policy file
      file:
        path: /tmp/minio_iam_policy.json
        state: absent

    - name: Attach policy to Misskey user
      command: /usr/local/bin/mc admin policy attach "{{ minio_alias }}" misskey-policy --user misskey-user
      register: policy_attach_result
      changed_when: policy_attach_result.rc == 0

    - name: Deploy bucket policy template
      template:
        src: templates/minio_cors_policy.json.j2
        dest: /tmp/minio_bucket_policy.json
        mode: '0600'

    - name: Apply secure bucket policy for ActivityPub federation access control
      command: /usr/local/bin/mc anonymous set-json "{{ minio_alias }}/{{ item }}" /tmp/minio_bucket_policy.json
      loop:
        - "{{ minio_bucket_name_for_misskey }}"
        - "{{ minio_bucket_name_for_outline }}"
      register: bucket_policy_result
      changed_when: bucket_policy_result.rc == 0

    - name: Clean up temporary bucket policy file
      file:
        path: /tmp/minio_bucket_policy.json
        state: absent

    - name: Enable Server-Side Encryption (SSE-S3) for data at rest protection
      command: /usr/local/bin/mc encrypt set sse-s3 "{{ minio_alias }}/{{ item }}"
      loop:
        - "{{ minio_bucket_name_for_misskey }}"
        - "{{ minio_bucket_name_for_outline }}"
      ignore_errors: yes
      register: encryption_result
      failed_when: encryption_result.rc != 0 and "already enabled" not in encryption_result.stderr

    - name: Display essential configuration summary
      debug:
        msg: |
          ==============================================
          MinIO Essential Security Configuration Complete
          ==============================================
          âœ… Web UI disabled (CLI management only)
          âœ… Buckets: {{ minio_bucket_name_for_misskey }}, {{ minio_bucket_name_for_outline }}
          âœ… IAM User: misskey-user (restricted permissions)
          âœ… Server-Side Encryption enabled (privacy protection)
          âœ… Federation access enabled (ActivityPub platforms)
          âœ… Direct browser access prevention (Nginx layer)
          âœ… Tailscale network access (internal communication)
          âœ… Rate limiting (basic DDoS protection)
          
          ðŸ”‘ Misskey Configuration (balthasar):
          S3_BUCKET={{ minio_bucket_name_for_misskey }}
          S3_ENDPOINT=http://[TAILSCALE_RASPBERRYPI_IP]:9000
          S3_ACCESS_KEY=misskey-user
          S3_SECRET_KEY={{ misskey_s3_secret_key }}
          S3_BASE_URL=https://{{ minio_api_server_name }}/{{ minio_bucket_name_for_misskey }}
          
          ðŸ”‘ Testing Steps:
          1. âœ… Tailscale connectivity: balthasar â†’ raspberrypi
          2. âœ… Misskey file upload functionality
          3. âœ… Federation image display via Cloudflare
          4. âœ… URL preservation: https://{{ minio_api_server_name }}/{{ minio_bucket_name_for_misskey }}/
          ==============================================
