- name: Create synapse directory
  file:
    path: /var/www/synapse
    state: directory

- name: Copy docker-compose.yml for synapse
  template:
    src: synapse_docker-compose.yml.j2
    dest: /var/www/synapse/docker-compose.yml

- name: Check if synapse container is running
  shell: docker ps --filter "name=synapse" --format "{{ '{{.Names}}' }}"
  register: synapse_container

- name: Generate synapse configuration
  command: docker-compose run --rm synapse generate
  args:
    chdir: /var/www/synapse
  when: synapse_container.stdout == ""

- name: Check if secrets file exists
  stat:
    path: '{{ secrets_file }}'
  register: secrets_file_stat

- name: Generate registration_shared_secret if not exists
  shell: 'cat /dev/urandom | base64 -w 0 | fold -w 100 | head -n 1'
  register: registration_shared_secret_output
  when: not secrets_file_stat.stat.exists

- name: Set registration_shared_secret fact
  set_fact:
    registration_shared_secret: "{{ registration_shared_secret_output.stdout if not secrets_file_stat.stat.exists else lookup('file', secrets_file) | from_yaml | default({}).registration_shared_secret }}"

- name: Generate macaroon_secret_key if not exists
  shell: 'cat /dev/urandom | base64 -w 0 | fold -w 100 | head -n 1'
  register: macaroon_secret_key_output
  when: not secrets_file_stat.stat.exists

- name: Set macaroon_secret_key fact
  set_fact:
    macaroon_secret_key: "{{ macaroon_secret_key_output.stdout if not secrets_file_stat.stat.exists else lookup('file', secrets_file) | from_yaml | default({}).macaroon_secret_key }}"

- name: Generate form_secret if not exists
  shell: 'cat /dev/urandom | base64 -w 0 | fold -w 100 | head -n 1'
  register: form_secret_output
  when: not secrets_file_stat.stat.exists

- name: Set form_secret fact
  set_fact:
    form_secret: "{{ form_secret_output.stdout if not secrets_file_stat.stat.exists else lookup('file', secrets_file) | from_yaml | default({}).form_secret }}"

- name: Save secrets to file
  copy:
    dest: '{{ secrets_file }}'
    content: |
      registration_shared_secret: "{{ registration_shared_secret }}"
      macaroon_secret_key: "{{ macaroon_secret_key }}"
      form_secret: "{{ form_secret }}"
  when: not secrets_file_stat.stat.exists

- name: Add required configurations to Synapse configuration file
  template:
    src: synapse.homeserver.yaml.j2
    dest: /var/www/synapse/data/homeserver.yaml
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Start or restart synapse container
  docker_compose:
    project_src: /var/www/synapse
    state: present
    restarted: yes
  when: synapse_container.stdout != ""

- name: Start synapse container
  docker_compose:
    project_src: /var/www/synapse
    state: present
  when: synapse_container.stdout == ""

- name: Create .well-known directory
  file:
    path: /var/www/synapse/.well-known/matrix
    state: directory
    recurse: yes

- name: Copy .well-known/matrix/client file
  template:
    src: .well-known.matrix.client.json.j2
    dest: /var/www/synapse/.well-known/matrix/client

- name: Copy nginx configuration for synapse
  template:
    src: nginx_synapse.conf.j2
    dest: /etc/nginx/conf.d/synapse.conf

- name: Restart nginx
  service:
    name: nginx
    state: restarted

- name: Obtain SSL certificate with certbot and Cloudflare
  command: certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/cloudflare/cloudflare.ini -d {{ synapse_server_name }} --non-interactive --agree-tos -m yamisskey@proton.me
  when: matrix_use_ssl

- name: Stop cloudflared service if running
  systemd:
    name: cloudflared
    state: stopped
    enabled: false
  ignore_errors: yes

- name: Find cloudflared UUID file
  find:
    paths: '/home/{{ ansible_user }}/.cloudflared'
    patterns: '*.json'
  register: uuid_files

- name: Set tunnel UUID
  set_fact:
    tunnel_uuid: "{{ item.path | regex_replace('^.*/(.*)\\.json$', '\\1') }}"
  loop: '{{ uuid_files.files }}'
  when: uuid_files.matched > 0
  changed_when: false

- name: Fail if no UUID file is found
  fail:
    msg: 'No cloudflared UUID file found in /home/{{ ansible_user }}/.cloudflared'
  when: uuid_files.matched == 0

- name: Debug tunnel_uuid
  debug:
    msg: 'Tunnel UUID: {{ tunnel_uuid }}'

- name: Set cloudflared config.yml content
  template:
    src: templates/cloudflared.config.yml.j2
    dest: /etc/cloudflared/config.yml
    owner: 'root'
    mode: '0600'
  notify: Restart Cloudflared

- name: Install cloudflared as a system service
  command: cloudflared service install
  args:
    creates: /etc/systemd/system/cloudflared.service

- name: Reload systemd to apply new service file
  command: systemctl daemon-reload

- name: Start and enable cloudflared service
  systemd:
    name: cloudflared
    state: started
    enabled: true
  become: true