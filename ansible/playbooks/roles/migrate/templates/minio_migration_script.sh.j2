#!/bin/bash
# MinIO Migration Script with Encryption
# Generated by Ansible for {{ inventory_hostname }}

set -e

# Configuration
SOURCE_ALIAS="{{ source_minio_alias }}"
TARGET_ALIAS="{{ target_minio_alias }}"
TEMP_DIR="{{ migration_temp_dir }}"
LOG_FILE="${TEMP_DIR}/migration.log"

# Fixed bucket list
BUCKET1="{{ buckets_to_migrate[0] }}"
BUCKET2="{{ buckets_to_migrate[1] }}"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling
handle_error() {
    log "ERROR: Migration failed at step: $1"
    log "Check log file: $LOG_FILE"
    exit 1
}

# Create subdirectories
mkdir -p "${TEMP_DIR}/${BUCKET1}"
mkdir -p "${TEMP_DIR}/${BUCKET2}"

log "=== MinIO Migration Started ==="
log "Source: {{ source_minio_host }} ({{ source_minio_ip }}:{{ source_minio_port }})"
log "Target: {{ inventory_hostname }} (localhost:{{ target_minio_port }})"
log "Buckets: ${BUCKET1}, ${BUCKET2}"
log "Temp dir: $TEMP_DIR"

# Phase 1: Download from source
log "=== Phase 1: Downloading from source MinIO ==="

for bucket in "$BUCKET1" "$BUCKET2"; do
    log "Processing bucket: $bucket"
    
    if ! /usr/local/bin/mc ls "$SOURCE_ALIAS/$bucket/" > /dev/null 2>&1; then
        log "WARNING: Source bucket $bucket does not exist or is empty, skipping"
        continue
    fi
    
    file_count=$(/usr/local/bin/mc ls --recursive "$SOURCE_ALIAS/$bucket/" 2>/dev/null | wc -l || echo "0")
    log "Found $file_count files in source bucket $bucket"
    
    if [ "$file_count" -gt 0 ]; then
        log "Starting download of $bucket ($file_count files)..."
        
        if /usr/local/bin/mc mirror "$SOURCE_ALIAS/$bucket/" "${TEMP_DIR}/${bucket}/" --overwrite; then
            log "Successfully downloaded files from $bucket"
        else
            handle_error "Download from source bucket $bucket"
        fi
    else
        log "No files to download from bucket $bucket"
    fi
done

# Phase 2: Upload to target
log "=== Phase 2: Uploading to target MinIO (with encryption) ==="

for bucket in "$BUCKET1" "$BUCKET2"; do
    log "Uploading bucket: $bucket"
    
    if [ ! -d "${TEMP_DIR}/${bucket}" ] || [ -z "$(ls -A "${TEMP_DIR}/${bucket}" 2>/dev/null)" ]; then
        log "No files to upload for bucket $bucket"
        continue
    fi
    
    file_count=$(find "${TEMP_DIR}/${bucket}/" -type f | wc -l)
    log "Uploading $file_count files to target bucket $bucket with encryption..."
    
    if /usr/local/bin/mc mirror "${TEMP_DIR}/${bucket}/" "$TARGET_ALIAS/$bucket/" --overwrite; then
        log "Successfully uploaded $file_count files to $bucket (encrypted)"
    else
        handle_error "Upload to target bucket $bucket"
    fi
done

# Phase 3: Verification
log "=== Phase 3: Migration Verification ==="

for bucket in "$BUCKET1" "$BUCKET2"; do
    log "Verifying bucket: $bucket"
    
    source_count=$(/usr/local/bin/mc ls --recursive "$SOURCE_ALIAS/$bucket/" 2>/dev/null | wc -l || echo "0")
    target_count=$(/usr/local/bin/mc ls --recursive "$TARGET_ALIAS/$bucket/" 2>/dev/null | wc -l || echo "0")
    
    log "Bucket $bucket - Source: $source_count files, Target: $target_count files"
    
    if [ "$source_count" -eq "$target_count" ]; then
        log "Bucket $bucket migration verified"
    else
        log "Bucket $bucket file count mismatch"
        handle_error "Verification of bucket $bucket"
    fi
done

log "All buckets verified successfully"

# Phase 4: Cleanup
log "=== Phase 4: Cleanup ==="
log "Removing temporary files..."

for bucket in "$BUCKET1" "$BUCKET2"; do
    if [ -d "${TEMP_DIR}/${bucket}" ]; then
        rm -rf "${TEMP_DIR}/${bucket}"
        log "Cleaned up temporary files for bucket $bucket"
    fi
done

log "Cleanup completed"

# Final summary
log "=== MinIO Migration Completed Successfully ==="
log "Final Summary:"

total_migrated=0
for bucket in "$BUCKET1" "$BUCKET2"; do
    target_count=$(/usr/local/bin/mc ls --recursive "$TARGET_ALIAS/$bucket/" 2>/dev/null | wc -l || echo "0")
    total_migrated=$((total_migrated + target_count))
    log "  $bucket: $target_count files migrated and encrypted"
done

log "Total files migrated: $total_migrated"

log "Next steps:"
log "1. Update application configurations with new endpoint"
log "2. Test file upload/download functionality"
log "3. Verify federation image display"
log "4. Update DNS: drive.yami.ski to {{ inventory_hostname }}"
log "5. Consider stopping source MinIO ({{ source_minio_host }})"

exit 0