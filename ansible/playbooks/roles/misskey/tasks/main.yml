- name: Ensure Misskey directory exists
  file:
    path: '{{ misskey_dir }}'
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

- name: Check if required files exist
  stat:
    path: '{{ item }}'
  loop:
    - '{{ misskey_dir }}/docker-compose.yml'
    - '{{ misskey_dir }}/.config/default.yml'
    - '{{ misskey_dir }}/.config/docker.env'
  register: required_files

- name: Fail if required files are missing
  fail:
    msg: 'Required file {{ item.item }} not found'
  when: not item.stat.exists
  loop: '{{ required_files.results }}'

- name: Stash local changes
  shell: git stash
  args:
    chdir: '{{ misskey_dir }}'
  register: stash_output
  ignore_errors: yes

- name: Checkout master branch
  shell: git checkout master
  args:
    chdir: '{{ misskey_dir }}'
  register: git_checkout_output

- name: Pull latest changes
  shell: git pull
  args:
    chdir: '{{ misskey_dir }}'
  register: git_pull_output

- name: Update submodules
  shell: git submodule update --init
  args:
    chdir: '{{ misskey_dir }}'
  register: git_submodule_update_output

- name: Apply stashed changes
  shell: git stash pop
  args:
    chdir: '{{ misskey_dir }}'
  when: stash_output is defined and "'No stash entries found.' not in stash_output.stderr"
  ignore_errors: yes

- name: Check if Misskey is already running
  shell: docker-compose ps -q
  args:
    chdir: '{{ misskey_dir }}'
  register: misskey_running
  failed_when: false

- name: Check if Docker image exists
  shell: docker images -q yamisskey-web:latest
  register: docker_image
  failed_when: false

- name: Determine if updates are needed
  set_fact:
    updates_needed: "{{ git_pull_output.stdout != 'Already up to date.' or git_submodule_update_output.stdout != '' or docker_image.stdout == '' }}"

- name: Build Misskey image if updates are needed
  shell: |
    TIMESTAMP_TAG="{{ ansible_date_time.iso8601_basic }}"
    IMAGE_NAME="misskey-web"

    # Build with timestamp tag
    COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build --no-cache --build-arg TAG=${IMAGE_NAME}:${TIMESTAMP_TAG}

    # Tag both with timestamp and latest
    docker tag misskey_web:latest ${IMAGE_NAME}:${TIMESTAMP_TAG}
    docker tag misskey_web:latest ${IMAGE_NAME}:latest
  args:
    chdir: '{{ misskey_dir }}'
  when: updates_needed
  register: build_output
  failed_when: build_output.rc != 0

- name: Debug build output
  debug:
    var: build_output
  when: updates_needed

- name: Fail if build failed
  fail:
    msg: "Build of Misskey failed with error: {{ build_output.stderr | default('Unknown error') }}"
  when: updates_needed and build_output.rc != 0

# This task is removed to avoid unintentional database initialization
# - name: Initialize Misskey database if not already running
#   shell: echo y | docker-compose run --rm web pnpm run init
#   args:
#     chdir: '{{ misskey_dir }}'
#     executable: /bin/bash
#   when: misskey_running.stdout == "" and updates_needed
#   register: init_output
#   failed_when: init_output.rc != 0
#   ignore_errors: yes

# - name: Fail if database initialization failed
#   fail:
#     msg: "Initialization of Misskey database failed with error: {{ init_output.stderr | default('Unknown error') }}"
#   when: misskey_running.stdout == "" and init_output.rc != 0

- name: Stop Misskey services
  shell: docker-compose stop
  args:
    chdir: '{{ misskey_dir }}'

- name: Start Misskey
  shell: docker-compose up -d
  args:
    chdir: '{{ misskey_dir }}'
    executable: /bin/bash
  register: start_output
  failed_when: start_output.rc != 0

- name: Restart Docker after starting Misskey
  systemd:
    name: docker
    state: restarted
  become: true

- name: Change permissions of files directory to upload files
  file:
    path: '{{ misskey_dir }}/files'
    mode: '0777'

- name: Deploy Nginx configuration for clear net
  template:
    src: templates/nginx_misskey.conf.j2
    dest: /etc/nginx/conf.d/misskey.conf
    owner: root
    group: root
    mode: '0644'
  notify: Reload Nginx

- name: Check if Nginx configuration exists
  stat:
    path: '/etc/nginx/conf.d/misskey.conf'
  register: nginx_conf

- name: Notify user if Nginx configuration does not exist
  fail:
    msg: 'Nginx configuration file /etc/nginx/conf.d/misskey.conf does not exist.'
  when: not nginx_conf.stat.exists

- name: Reload Nginx if configuration files exist
  systemd:
    name: nginx
    state: reloaded
  when: nginx_conf.stat.exists or nginx_onion_conf.stat.exists or cloudflare_conf.stat.exists

- name: Ensure backup directory exists
  file:
    path: '{{ backup_dir }}/misskey'
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'

- name: Check if VAPID keys file exists
  stat:
    path: '{{ backup_dir }}/misskey/vapid_keys.yml'
  register: vapid_keys_file

- name: Generate VAPID keys
  when: not vapid_keys_file.stat.exists
  shell: docker run node npx web-push generate-vapid-keys --json
  register: vapid_keys

- name: Save VAPID keys to a file
  when: not vapid_keys_file.stat.exists
  copy:
    content: '{{ vapid_keys.stdout }}'
    dest: '{{ backup_dir }}/misskey/vapid_keys.yml'

- name: Load VAPID keys from file
  slurp:
    src: '{{ backup_dir }}/misskey/vapid_keys.yml'
  register: vapid_keys_content

- name: Debug VAPID keys content
  debug:
    var: vapid_keys_content.content

- name: Set VAPID keys variables
  set_fact:
    vapid_keys_data: "{{ vapid_keys_content.content | b64decode | from_yaml }}"
    vapid_public_key: "{{ vapid_keys_data.publicKey }}"
    vapid_private_key: "{{ vapid_keys_data.privateKey }}"

- name: Print VAPID keys
  debug:
    msg:
      - 'Public Key: {{ vapid_public_key }}'
      - 'Private Key: {{ vapid_private_key }}'