---
- name: Check if directory exists
  stat:
    path: '{{ misskey_dir }}'
  register: dir_check

- name: Ensure Misskey directory exists
  file:
    path: '{{ misskey_dir }}'
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'

- name: Create required directories
  file:
    path: '{{ item }}'
    state: directory
    mode: '0755'
  loop:
    - '{{ misskey_dir }}/.config'
    - '{{ misskey_dir }}/files'
    - '{{ misskey_dir }}/redis'
    - '{{ misskey_dir }}/db'

- name: Check if required files exist
  stat:
    path: '{{ item }}'
  loop:
    - '{{ misskey_dir }}/docker-compose.yml'
    - '{{ misskey_dir }}/.config/default.yml'
    - '{{ misskey_dir }}/.config/docker.env'
  register: required_files

- name: Deploy docker-compose.yml
  template:
    src: templates/misskey_docker-compose.yml.j2
    dest: '{{ misskey_dir }}/docker-compose.yml'
    mode: '0644'
  when: not required_files.results[0].stat.exists

- name: Recheck if required files exist
  stat:
    path: '{{ item }}'
  loop:
    - '{{ misskey_dir }}/docker-compose.yml'
    - '{{ misskey_dir }}/.config/default.yml'
    - '{{ misskey_dir }}/.config/docker.env'
  register: final_check

- name: Fail if required files are still missing
  fail:
    msg: 'Required file {{ item.item }} not found'
  when: not item.stat.exists
  loop: '{{ final_check.results }}'

- name: Deploy postgresql.conf
  template:
    src: templates/misskey_postgresql.conf.j2
    dest: '{{ misskey_dir }}/.config/postgresql.conf'
    mode: '0644'

- name: Fail if required files are missing
  fail:
    msg: 'Required file {{ item.item }} not found'
  when: not item.stat.exists
  loop: '{{ required_files.results }}'

- name: Check if external network exists
  shell: 'docker network ls | grep external_network || true'
  register: network_check
  changed_when: false

- name: Create external network if not exists
  shell: 'docker network create external_network'
  when: network_check.stdout == ""

- name: Check if database is initialized
  stat:
    path: '{{ misskey_dir }}/db/PG_VERSION'
  register: db_initialized

- name: Stop existing containers before first initialization
  shell: '{{ docker_compose_cmd }} down'
  args:
    chdir: '{{ misskey_dir }}'
  when: not db_initialized.stat.exists

- name: Initialize database (first time only)
  shell: '{{ docker_compose_cmd }} run --rm web pnpm run init'
  args:
    chdir: '{{ misskey_dir }}'
  when: not db_initialized.stat.exists
  register: init_output
  failed_when: init_output.rc != 0

- name: Determine if updates are needed
  set_fact:
    updates_needed: "{{ git_pull_output.stdout != 'Already up to date.' or git_submodule_update_output.stdout != '' }}"

- name: Stop Misskey services
  shell: '{{ docker_compose_cmd }} stop'
  args:
    chdir: '{{ misskey_dir }}'
  when: updates_needed or not db_initialized.stat.exists

- name: Start Misskey
  shell: '{{ docker_compose_cmd }} up -d'
  args:
    chdir: '{{ misskey_dir }}'
  register: start_output
  failed_when: start_output.rc != 0

- name: Change permissions of files directory
  file:
    path: '{{ misskey_dir }}/files'
    mode: '0777'

- name: Ensure backup directory exists
  file:
    path: '{{ backup_dir }}/misskey'
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'

- name: Check if VAPID keys file exists
  stat:
    path: '{{ backup_dir }}/misskey/vapid_keys.yml'
  register: vapid_keys_file

- name: Generate VAPID keys
  when: not vapid_keys_file.stat.exists
  shell: docker run node npx web-push generate-vapid-keys --json
  register: vapid_keys

- name: Save VAPID keys to a file
  when: not vapid_keys_file.stat.exists
  copy:
    content: '{{ vapid_keys.stdout }}'
    dest: '{{ backup_dir }}/misskey/vapid_keys.yml'

- name: Load VAPID keys from file
  slurp:
    src: '{{ backup_dir }}/misskey/vapid_keys.yml'
  register: vapid_keys_content

- name: Debug VAPID keys content
  debug:
    var: vapid_keys_content.content

- name: Decode VAPID keys data
  set_fact:
    vapid_keys_data: "{{ vapid_keys_content.content | b64decode | from_yaml }}"

- name: Set VAPID keys variables
  set_fact:
    vapid_public_key: "{{ vapid_keys_data.publicKey }}"
    vapid_private_key: "{{ vapid_keys_data.privateKey }}"

- name: Print VAPID keys
  debug:
    msg:
      - 'Public Key: {{ vapid_public_key }}'
      - 'Private Key: {{ vapid_private_key }}'