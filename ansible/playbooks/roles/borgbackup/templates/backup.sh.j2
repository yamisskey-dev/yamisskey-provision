#!/bin/bash
set -e

# 基本設定
CONFIG_FILE="{{ borg_backup_dir }}/config/config.sh"
LOCK_FILE="/tmp/borg-backup.lock"
LOG_FILE="{{ borg_backup_log_file }}"
HELPERS_FILE="{{ borg_backup_dir }}/helpers.sh"
BACKUP_SUCCESS=0

# ヘルパー関数の読み込み
[ -f "$HELPERS_FILE" ] && source "$HELPERS_FILE" || { echo "ヘルパーファイルがありません: $HELPERS_FILE"; exit 1; }

# ロック処理
create_lock
trap 'rm -f "$LOCK_FILE"; backup_completion' EXIT

# 設定ファイル読み込み
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE" || { echo "設定ファイルがありません: $CONFIG_FILE"; exit 1; }

# ラズパイの接続確認
log "ラズベリーパイへの接続を試行中..."

# ラズパイ接続情報の設定
RPI_HOST="{{ raspberry_pi_host }}"  # Tailscaleホスト名を使用

# Tailscaleの接続確認
log "Tailscaleの接続を確認中... ($RPI_HOST)"
if ! tailscale ping -c 1 "$RPI_HOST" &>/dev/null; then
  error_handler "ラズベリーパイ($RPI_HOST)にTailscaleで接続できません"
fi

# バックアップディレクトリ確認（tailscale sshを使用）
log "バックアップディレクトリを確認中..."
if ! tailscale ssh "{{ raspberry_pi_user }}@$RPI_HOST" "test -d {{ raspberry_pi_backup_dir }}/{{ actual_hostname }}" &>/dev/null; then
  log "バックアップディレクトリが存在しません。作成します..."
  tailscale ssh "{{ raspberry_pi_user }}@$RPI_HOST" "sudo mkdir -p {{ raspberry_pi_backup_dir }} && \
    sudo chown {{ raspberry_pi_user }}:{{ raspberry_pi_user }} {{ raspberry_pi_backup_dir }} && \
    mkdir -p {{ raspberry_pi_backup_dir }}/{{ actual_hostname }}" || error_handler "バックアップディレクトリの作成に失敗しました"
fi

# バックアップ開始
log "===== バックアップ開始: $(date) ====="

# レポジトリごとのバックアップ処理
for repo_data in "${REPOSITORIES[@]}"; do
  # 設定を分解
  IFS='|' read -r repo_name repo_url paths_raw excludes_raw <<< "$repo_data"
  IFS=',' read -ra backup_paths <<< "$paths_raw"
  
  # パスフレーズ設定
  eval export BORG_PASSPHRASE=\$BORG_PASSPHRASE_${repo_name^^}

  log "リポジトリ $repo_name へのバックアップを開始します"

  # バックアップ作成
  backup_cmd="borg create --stats --compression zstd,3"

  # コマンド構築（リポジトリURLとアーカイブ名を正しく構成）
  backup_cmd+=" \"$repo_url::$repo_name-{now:%Y-%m-%d_%H:%M}\""

  # バックアップ対象パスを追加
  for path in "${backup_paths[@]}"; do
    backup_cmd+=" \"$path\""
  done
  
  log "コマンド実行: $backup_cmd"
  eval "$backup_cmd" || error_handler "バックアップの作成に失敗しました: $repo_name"
  
  # 古いバックアップのプルーニング
  log "古いバックアップをプルーニング中..."
  borg prune --stats \
    --keep-daily ${KEEP_DAILY:-7} \
    --keep-weekly ${KEEP_WEEKLY:-4} \
    --keep-monthly ${KEEP_MONTHLY:-6} \
    "$repo_url" || log "プルーニングに失敗しました"
    
  # 月に1回だけリポジトリの整合性チェック
  if [ "$(date +%d)" = "01" ] || [ "$FORCE_CHECK" = "true" ]; then
    log "リポジトリチェックを実行中..."
    borg check "$repo_url" || log "リポジトリチェックに失敗しました"
  fi
  
  log "リポジトリ $repo_name のバックアップが完了しました"
done

# 全て正常に完了したフラグを設定
BACKUP_SUCCESS=1

log "すべてのバックアップ処理が完了しました"
log "===== すべてのバックアップが正常に完了しました: $(date) ====="