#!/bin/bash
set -e

# 基本設定
CONFIG_FILE="{{ borg_backup_dir }}/config/config.sh"
LOCK_FILE="/tmp/borg-backup.lock"
LOG_FILE="{{ borg_backup_log_file }}"

# ロック処理
if [ -e "$LOCK_FILE" ]; then
  PID=$(cat "$LOCK_FILE")
  if ps -p "$PID" > /dev/null; then
    echo "別のバックアッププロセスが実行中です (PID: $PID)"
    exit 1
  else
    rm -f "$LOCK_FILE"
  fi
fi
echo $$ > "$LOCK_FILE"
trap 'rm -f "$LOCK_FILE"' EXIT

# 設定ファイル読み込み
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE" || { echo "設定ファイルがありません: $CONFIG_FILE"; exit 1; }

# ログ関数
log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"; }

# エラーハンドラ
error_handler() {
  log "エラー: $1"
  # Discord通知（設定ファイルがある場合）
  if [ -f "/opt/misskey-backup/config/env.yml" ]; then
    source /opt/misskey-backup/config/env.yml
    [ -n "${DISCORD_WEBHOOK_URL:-}" ] && \
      curl -s -H "Content-Type: application/json" \
      -d "{\"content\":\"⚠️ **Borgバックアップエラー** ($(hostname)): $1\"}" \
      "$DISCORD_WEBHOOK_URL"
  fi
  exit 1
}

# ラズパイ接続確認
log "ラズベリーパイへの接続をテスト中..."
ping -c 1 {{ raspberry_pi_host }} &>/dev/null || error_handler "ラズベリーパイに接続できません"

# バックアップ開始
log "===== バックアップ開始: $(date) ====="

# レポジトリごとのバックアップ処理
for repo_data in "${REPOSITORIES[@]}"; do
  # 設定を分解
  IFS=':' read -r repo_name repo_url paths_raw excludes_raw <<< "$repo_data"
  IFS=',' read -ra backup_paths <<< "$paths_raw"
  
  # 除外パターン
  exclude_args=""
  if [[ -n "$excludes_raw" ]]; then
    IFS=',' read -ra exclude_patterns <<< "$excludes_raw"
    for pattern in "${exclude_patterns[@]}"; do
      exclude_args+=" --exclude '$pattern'"
    done
  fi
  
  # パスフレーズ設定
  eval export BORG_PASSPHRASE=\$BORG_PASSPHRASE_${repo_name^^}
  
  log "--- $repo_name へのバックアップを開始 ---"
  
  # リポジトリ初期化確認
  if ! borg info "$repo_url" >/dev/null 2>&1; then
    log "リポジトリを初期化: $repo_url"
    borg init --encryption=repokey-blake2 "$repo_url" || error_handler "初期化失敗"
  fi
  
  # バックアップ実行
  log "バックアップを作成..."
  backup_cmd="borg create --stats --compression zstd,3 $exclude_args \"$repo_url::$repo_name-{now:%Y-%m-%d_%H:%M}\""
  for path in "${backup_paths[@]}"; do
    backup_cmd+=" \"$path\""
  done
  
  eval "$backup_cmd" || { log "バックアップ失敗"; continue; }
  
  # 古いバックアップのプルーニング
  log "古いバックアップをプルーニング..."
  borg prune --stats \
    --keep-daily ${KEEP_DAILY:-7} \
    --keep-weekly ${KEEP_WEEKLY:-4} \
    --keep-monthly ${KEEP_MONTHLY:-6} \
    "$repo_url" || log "プルーニング失敗"
  
  # 月次の整合性チェック
  if [ "$(date +%d)" -eq "1" ]; then
    log "月次リポジトリチェック実行..."
    borg check "$repo_url" || log "リポジトリチェック失敗"
  fi
  
  log "--- $repo_name へのバックアップ完了 ---"
done

log "===== すべてのバックアップが完了: $(date) ====="

# 成功通知
if [ -f "/opt/misskey-backup/config/env.yml" ]; then
  source /opt/misskey-backup/config/env.yml
  if [ -n "${DISCORD_WEBHOOK_URL:-}" ] && [ -n "${NOTIFICATION:-}" ] && [ "${NOTIFICATION}" = "true" ]; then
    curl -s -H "Content-Type: application/json" \
      -d "{\"content\":\"✅ **Borgバックアップ成功** ($(hostname)): バックアップが完了しました\"}" \
      "$DISCORD_WEBHOOK_URL"
  fi
fi