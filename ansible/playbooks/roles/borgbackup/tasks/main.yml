# 1. Borgのインストール
- name: Install Borg Backup
  package:
    name: borgbackup
    state: present

# 2. ディレクトリ構造の作成
- name: Create necessary directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  loop:
    - "{{ borg_backup_dir }}"
    - "{{ borg_backup_dir }}/config"
    - "{{ borg_backup_dir }}/logs"
    - "{{ borg_backup_dir }}/cache"
    - "{{ backup_dir }}"

# 3. ラズベリーパイの接続確認（IP取得優先）
- name: Extract Raspberry Pi IP from Tailscale
  shell: tailscale status | grep -w "{{ raspberry_pi_host }}" | awk '{print $1}'
  register: raspberry_pi_ip
  changed_when: false
  ignore_errors: true
  become: false

- name: Set Raspberry Pi IP variable with fallback
  set_fact:
    raspberry_pi_actual_ip: "{{ raspberry_pi_ip.stdout if raspberry_pi_ip.stdout else raspberry_pi_host }}"

- name: Display current host and target information
  debug:
    msg: "ホスト: {{ actual_hostname }} → バックアップ先: {{ raspberry_pi_host }} (IP: {{ raspberry_pi_actual_ip }})"

# 4. シークレット管理
- name: Check if Borg secrets file exists
  stat:
    path: "{{ borg_secrets_file }}"
  register: borg_secrets_file_stat

- name: Generate repository passphrases
  when: not borg_secrets_file_stat.stat.exists
  block:
    - name: Generate random passphrases for each repository
      set_fact:
        generated_passphrases: "{{ generated_passphrases | default({}) | combine({item.name: lookup('password', '/dev/null chars=ascii_letters,digits length=32')}) }}"
      loop: "{{ borg_repositories }}"

    - name: Save passphrases to secrets file
      copy:
        dest: "{{ borg_secrets_file }}"
        content: |
          borg_passphrases:
          {% for repo in borg_repositories %}
            {{ repo.name }}: "{{ generated_passphrases[repo.name] }}"
          {% endfor %}
          discord_webhook_url: ""  # 手動で設定するためデフォルトは空文字列
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

- name: Load passphrases from secrets file
  when: borg_secrets_file_stat.stat.exists
  include_vars:
    file: "{{ borg_secrets_file }}"
    name: borg_secrets

# 5. 設定ファイルの配置
- name: Create Borg configuration file
  template:
    src: config.sh.j2
    dest: "{{ borg_backup_dir }}/config/config.sh"
    mode: '0600'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

# 6. バックアップスクリプトの配置
- name: Deploy Borg backup script
  template:
    src: backup.sh.j2
    dest: "{{ borg_backup_dir }}/borg-backup.sh"
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

# helpers.shをデプロイするタスクを追加
- name: Deploy Borg helpers script
  template:
    src: helpers.sh.j2
    dest: "{{ borg_backup_dir }}/helpers.sh"
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

# 7. ラズベリーパイの接続確認（IP取得優先）
- name: Extract Raspberry Pi IP from Tailscale
  shell: tailscale status | grep -w "{{ raspberry_pi_host }}" | awk '{print $1}'
  register: raspberry_pi_ip
  changed_when: false
  ignore_errors: true
  become: false

- name: Set Raspberry Pi IP variable with fallback
  set_fact:
    raspberry_pi_actual_ip: "{{ raspberry_pi_ip.stdout if raspberry_pi_ip.stdout else raspberry_pi_host }}"

- name: Display current host and target information
  debug:
    msg: "ホスト: {{ actual_hostname }} → バックアップ先: {{ raspberry_pi_host }} (IP: {{ raspberry_pi_actual_ip }})"

- name: Verify backup path on Raspberry Pi
  shell: ssh -o BatchMode=yes {{ raspberry_pi_user }}@{{ raspberry_pi_actual_ip }} "ls -la {{ raspberry_pi_backup_dir }} || mkdir -p {{ raspberry_pi_backup_dir }}"
  register: path_check
  changed_when: false
  ignore_errors: true
  become: false

- name: Check if Raspberry Pi is reachable by IP
  command: ping -c 1 {{ raspberry_pi_actual_ip }}
  register: ping_result
  failed_when: false
  changed_when: false
  ignore_errors: true

- name: Warn if Raspberry Pi is not reachable
  debug:
    msg: "警告: ラズベリーパイ ({{ raspberry_pi_host }}/{{ raspberry_pi_actual_ip }}) に接続できません。バックアップが失敗する可能性があります。"
  when: ping_result.rc != 0

# 8. SSH設定（ディレクトリ作成を先に）
- name: Ensure SSH known_hosts directory exists
  file:
    path: ~/.ssh
    state: directory
    mode: '0700'
  become: false

- name: Check SSH key exists
  stat:
    path: ~/.ssh/id_ed25519
  register: ssh_key_check
  become: false

- name: Generate SSH key if needed
  shell: ssh-keygen -t ed25519 -N "" -f ~/.ssh/id_ed25519
  when: not ssh_key_check.stat.exists
  become: false

- name: Add SSH host key to known_hosts
  shell: ssh-keyscan -H {{ raspberry_pi_actual_ip }} >> ~/.ssh/known_hosts
  args:
    creates: "~/.ssh/known_hosts_{{ raspberry_pi_actual_ip }}"
  ignore_errors: true
  become: false

# 9. リモート側のディレクトリ確認と作成
- name: Create backup directory structure on Raspberry Pi
  shell: |
    mkdir -p {{ raspberry_pi_backup_dir }}/{{ actual_hostname }}
    chown -R {{ raspberry_pi_user }}:{{ raspberry_pi_user }} {{ raspberry_pi_backup_dir }}/{{ actual_hostname }}
    chmod -R 755 {{ raspberry_pi_backup_dir }}/{{ actual_hostname }}
    touch {{ raspberry_pi_backup_dir }}/.initialized_{{ actual_hostname }}
    echo "Directory created/verified for {{ actual_hostname }} at $(date)" > {{ raspberry_pi_backup_dir }}/.initialized_{{ actual_hostname }}
  args:
    creates: "{{ raspberry_pi_backup_dir }}/.initialized_{{ actual_hostname }}"
  register: mkdir_result
  changed_when: mkdir_result.rc == 0
  failed_when: mkdir_result.rc != 0 and "already exists" not in mkdir_result.stderr

# 10. 初期レポジトリセットアップ
- name: Check if Borg repositories already exist
  stat:
    path: "{{ borg_backup_dir }}/cache/{{ item.name }}.initialized"
  loop: "{{ borg_repositories }}"
  register: borg_repo_init_check

- name: Initialize Borg repositories if they don't exist
  shell: |
    ssh {{ raspberry_pi_user }}@{{ raspberry_pi_actual_ip }} "sudo chown -R {{ raspberry_pi_user }}:{{ raspberry_pi_user }} {{ raspberry_pi_backup_dir }}/{{ actual_hostname }}"
    {% if borg_secrets_file_stat.stat.exists %}
    export BORG_PASSPHRASE="{{ borg_secrets.borg_passphrases[item.0.name] }}"
    {% else %}
    export BORG_PASSPHRASE="{{ generated_passphrases[item.0.name] }}"
    {% endif %}
    borg init --encryption=repokey-blake2 "{{ item.0.url }}"
    touch "{{ borg_backup_dir }}/cache/{{ item.0.name }}.initialized"
  args:
    creates: "{{ borg_backup_dir }}/cache/{{ item.0.name }}.initialized"
  loop: "{{ borg_repositories | zip(borg_repo_init_check.results) | list }}"
  loop_control:
    label: "{{ item.0.name }}"
  when: not item.1.stat.exists
  no_log: true

# 11. Cronジョブの設定
- name: Set up cron job for automated backups
  cron:
    name: "Run Borg backup"
    hour: "{{ borg_backup_hour | default('2') }}"
    minute: "{{ borg_backup_minute | default('0') }}"
    job: "{{ borg_backup_dir }}/borg-backup.sh > {{ borg_backup_dir }}/logs/backup_$(date +\\%Y\\%m\\%d).log 2>&1"
    user: "{{ ansible_user }}"

# 12. シンボリックリンク作成
- name: Create symlink for easy access
  file:
    src: "{{ borg_backup_dir }}/borg-backup.sh"
    dest: "/usr/local/bin/borg-backup"
    state: link
    force: yes